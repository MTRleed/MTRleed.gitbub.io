<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客搭建yayay</title>
      <link href="/index.html"/>
      <url>/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在暑假抽空搭建了一个属于自己的博客，顺便把自己的搭建过程记录下来，与大家分享</strong></p><h2 id="VPS和域名"><a href="#VPS和域名" class="headerlink" title="VPS和域名"></a>VPS和域名</h2><p>1.购买服务器<br>2.购买域名<br>3.域名绑定IP解析</p><h2 id="安装Node与Git"><a href="#安装Node与Git" class="headerlink" title="安装Node与Git"></a>安装Node与Git</h2><p>1.安装Node 到官网下载，安装。<code>http://nodejs.cn/</code></p><p>2.安装Git 到官网下载，安装。<code>https://gitforwindows.org/</code></p><p>2.1。设置git 用户和邮箱，后面获取 SSH 密钥需要</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;MTRleed&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>3.安装npm 后使用 npm 安装cnmp 。由于npm国内下载速度经常抽风，所以建议安装淘宝的这个镜像；使用方法就是在命令中把npm换成cnpm即可。</p><p>npm 在安装Node 的时候就会一并安装</p><p>安装好node之后，node的环境变量会自动配置好，这里需要配置npm的环境变量。</p><p>3.1 打开node目录，在nodejs下建立”node_global”及”node_cache”两个文件夹，输入以下命令改变npm配置，记得改成自己的路径</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;F:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;F:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>3.2安装cnpm 的cmd 命令 <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>安装完 cnpm -v 显示 ‘cnpm’ 不是内部或外部命令，也不是可运行的程序 ,将存有 cnpm.cmd 的路径添加到环境变量中。再次执行就可以看到，对应版本信息。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hexo文件架构。</span><br><span class="line">├── node_modules：<span class="comment">#依赖包-安装插件及所需nodejs模块。</span></span><br><span class="line">├── public  <span class="comment">#最终网页信息。即存放被解析markdown、html文件。</span></span><br><span class="line">├── scaffolds <span class="comment">#模板文件夹。即当您新建文章时，根据 scaffold生成文件。</span></span><br><span class="line">├── <span class="built_in">source</span>  <span class="comment">#资源文件夹。即存放用户资源。</span></span><br><span class="line">|   └── _posts <span class="comment">#博客文章目录。</span></span><br><span class="line">└── themes <span class="comment">#存放主题。Hexo根据主题生成静态页面。</span></span><br><span class="line">├── _config.yml   <span class="comment">#网站的配置信息。标题、网站名称等。</span></span><br><span class="line">├── db.json：<span class="comment">#source解析所得到的缓存文件。</span></span><br><span class="line">├── package.json  <span class="comment"># 应用程序信息。即配置Hexo运行需要js包。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><blockquote><p>```</p><ol start="2"><li>Yaml配置文件</li></ol><p>Yaml是专门用来写配置文件。即：一种通用的数据串行化格式。</p><p>基本规则<br> 大小写敏感。<br> 使用缩进表示层级关系。<br> 缩进时不允许使用Tab键，只允许使用空格。<br> 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.全局安装Hexo（不建议）</span><br><span class="line">在桌面空白处单击右键，打开git bash，输入`cnpm install hexo-cli -g`；安装完成后输入`hexo -v`，出现版本信息则表示安装成功。</span><br><span class="line"></span><br><span class="line">2.在项目中安装Hexo（我使用的）</span><br><span class="line">在桌面打开git bash，输入`mkdir blog`（在桌面新建了一个名为blog的文件夹），然后输入`cd blog`（进入到这个文件夹里），再依次执行如下操作：</span><br><span class="line"></span><br><span class="line">```cmd</span><br><span class="line">cnpm install hexo --save    #在当前项目中安装hexo；</span><br><span class="line">hexo init                   #初始化hexo；</span><br><span class="line">cnpm install                #安装依赖包；</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>3.安装Hexo插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-server --save         #搭建本地服务器所需插件</span><br><span class="line">cnpm install hexo-deployer-git --save   #使用git方式进行部署博客所需插件，就是推向远端的工具</span><br></pre></td></tr></table></figure><h2 id="Hexo常用命令详解"><a href="#Hexo常用命令详解" class="headerlink" title="Hexo常用命令详解"></a>Hexo常用命令详解</h2><p>Hexo 框架可以帮助我们快速创建一个属于自己的博客网站，熟悉 Hexo 框架提供的命令有利于我们管理博客</p><p>1、hexo init</p><p><code>hexo init</code> 命令用于初始化本地文件夹为网站的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><ul><li><code>folder</code>  可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li></ul><p> 2、hexo new</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new` 命令用于新建文章，一般可以简写为 `hexo n</span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><code>layout</code>  可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code>  必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><p> 3、hexo generate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate` 命令用于生成静态文件，一般可以简写为 `hexo g</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul><p>详细信息请参考：<a href="https://hexo.io/docs/generating">https://hexo.io/docs/generating</a></p><p> 4、hexo server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server` 命令用于启动本地服务器，一般可以简写为 `hexo s</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><p><strong>说明</strong> ：运行服务器前需要安装 hexo-server 插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>详细信息请参考：<a href="https://hexo.io/docs/server.html">https://hexo.io/docs/server.html</a></p><p> 5、hexo deploy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy` 命令用于部署网站，一般可以简写为 `hexo d</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li></ul><p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: &lt;repository url&gt;</span><br><span class="line">branch:master</span><br><span class="line">message: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>详细信息请参考：<a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p><p> 6、hexo clean</p><p><code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p><strong>网站显示异常时可尝试此操作</strong></p><p> 7、Option</p><p>（1）hexo –safe</p><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p><strong>安装新插件时遇到问题可尝试此操作</strong></p><p>（2）hexo –debug</p><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>（3）hexo –silent</p><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在本地生成博客静态页面并预览</p><p>以下皆为hexo的指令：</p><ol><li>在本地生成静态页面<br> <code>hexo generate</code>，会生成一个存放静态文件的文件夹<strong>public</strong>，其简写形式为<code>hexo g</code>；</li><li>启动本地服务器<br> <code>hexo server</code>,其简写形式为<code>hexo s</code>；<br> 这条指令运行完成后可在本地启动服务器并预览博客，默认网址为<code>http://localhost:4000/</code>。<br> 如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面</li></ol><p><img src="C:\Users\MTRleed\Desktop\QQ截图20210909151214.png"></p><h2 id="设置-SSH-连接"><a href="#设置-SSH-连接" class="headerlink" title="设置 SSH 连接"></a>设置 SSH 连接</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题，本地gi t项目与远端GitHub 连接</p><p>1.查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git</p><p>2.<strong>生成 SSH keys</strong></p><p>输入你自己的邮箱地址</p><p>在终端或者你的项目下 <code>ssh-keygen -t rsa -C &quot;80583600@qq.com&quot;</code></p><p>3.在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，根据需要而定可以直接按回车不设置密码。</p><p>4.<strong>添加 SSH Key 到 GitHub</strong></p><p>打开<code>C:\Users\MTRleed\.ssh\id_rsa.pub1，此文件里面内容为刚才生成的密钥，记事本打开，准确的复制这个文件的内容，粘贴到</code><a href="https://link.jianshu.com/?t=https://github.com/settings/ssh">https://github.com/settings/ssh</a>`的new SSH key中，就是这，tittle 可任意，内容放在 key 处</p><p><img src="E:\桌面\QQ截图20210910084616.png"></p><p>5.连接测试，在项目下使用 git bash ，<code>ssh -T git@github.com</code> # 注意邮箱地址不用改</p><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p><strong>Hi MTRleed! You’ve successfully authenticated, but GitHub does not provide shell access.</strong></p></blockquote><p>说明 SSH 设置成功了</p><h2 id="部署远端"><a href="#部署远端" class="headerlink" title="部署远端"></a>部署远端</h2><p>1.找到_config.yml</p><p>在最后一行修改</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">deploy: </span></span><br><span class="line"><span class="function"><span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function"><span class="title">repository</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">MTRleed</span>/<span class="title">MTRleed.gitbub.io.git</span>//弄得<span class="title">GitHub</span>地址</span></span><br><span class="line"><span class="function"><span class="title">branch</span>: <span class="title">master</span></span></span><br><span class="line"><span class="function">注意，每个 ：后面都要有个空格</span></span><br></pre></td></tr></table></figure><p>2.hexo clean，然后 hexo g 最后 hexo d</p><p>问题：hexo g 后显示 ERROR Deployer not found: git</p><p>在博客目录下 安装deployer服务<code>cnpm install hexo-deployer-git --save</code></p><p>hexo d 之后要进行 git 与 GitHub的认证，当出现</p><p><img src="E:\桌面\QQ截图20210910113259.png"></p><p>即为成功！</p><p>现在可以使用 <code>https://用户名.github.io</code>访问了</p><h2 id="域名解析绑定"><a href="#域名解析绑定" class="headerlink" title="域名解析绑定"></a>域名解析绑定</h2><p>1.在GitHub 的main下添加一个 CNAME 文件（无后缀），里面的内容写你的域名，例如：<code>www.mtrleed.com</code></p><p>同时在source 目录添加一个新文件 CNAME 就好 CNAME 不带任何后缀，这就是全称，里面写的是你的域名然后就ok了。</p><p><img src="E:\桌面\QQ截图20210910130807.png"></p><p>Source 选择 master，域名写我们自己的域名</p><p>建议将 HTTPS 服务打开，在下面我们会申请 SSL 进行服务的部署</p><p>域名解析可以选择 腾讯云 或者 cloudflare 解析</p><p>2.1.若选择腾讯云，在腾讯云添加 CNAME 解析，像这样</p><p><img src="E:\桌面\QQ截图20210910131122.png"></p><p>解析过程所需时间不定，最慢可能要半天，不急。等解析好后，就可以使用 <code>www.mtrleed.com</code>访问<code>www.github.io</code>了</p><p>添加 HTTPS:// 服务：在腾讯云申请 SSL ，免费的几分钟就好。然后部署到我们所要的域名，等待解析时间即可。然后一行访问域名就会默认 HTTPS 协议传输</p><p>2.2.使用cloudflare 解析和使用腾讯云差不多。参考<code>https://blog.csdn.net/qq_37683287/article/details/91559605</code></p><h2 id="Hexo-主题更换"><a href="#Hexo-主题更换" class="headerlink" title="Hexo 主题更换"></a>Hexo 主题更换</h2><p>我使用的是 Butterfly -By John Doe 主题。</p><p>1.在themes 目录下使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/jerryc127/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><p>然后到 config文件中将 theme 参数改成我们主题的名字，注意主题名字要和你themes 下主题文件名一致，否则报错。</p><p><strong>问题：1</strong>.有时候我们在GitHub上clone一些项目的时候，会出现error: RPC failed; curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected flush after ref listing错误。<br>此时执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span>//针对所有远程服务器全局执行，使git忽略ssl证书错误（把忽略证书错误的设置限定在特定的仓库</span><br></pre></td></tr></table></figure><p>然后再clone即可</p><p>有时候执行 hexo d 会报 <code>OpenSSL SSL_connect: Connection was reset in connection to github.com:443</code>会样的错，(这是使用代理造成的)这时你需要撤掉梯子，重新使用SSL连接GitHub，然后再hexo d</p><p>**问题2.**：更换butterfly主题后报错：extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug<br>解决办法：<br>1.在博客目录下打开git bash here，输入命令：npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>然后再：<br> hexo clean<br> hexo g<br> hexo s<br> 然后问题就解决啦</p><p><strong>问题3</strong> ：主题换好后只在本地生效，在使用域名访问时主题没有改变<br>不要在master分支上部署pages服务。master分支是保存代码的，你要用hexo编译，生成public文件夹后，将public文件夹推到另一个分支，然后在这个分支上部署pages服务。</p><p><strong>问题4：</strong><br>hexo d 后显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> 2021/09/08/hello-world/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/2021/09/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/2021/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> atom.xml.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> css/index.css.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/main.js.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/search/algolia.js.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/search/local-search.js.</span><br></pre></td></tr></table></figure><p>我们只需执行<code>git config --global core.autocrlf false</code>即可解决</p><p>**解释:**将core.autocrlf设为false即可解决这个问题，不过如果你和你的伙伴只工作于Windows平台或者Linux平台，那么没问题，不过如果是存在跨平台的现象的话，还是需要考虑一下。<br>但当 core autocrlf为true时，还有一个需要慎重的地方，当你上传一个二进制文件，Git可能会将二进制文件误以为是文本文件，从而也会修改你的二进制文件，从而产生隐患</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.autocrlf true #最后这里依据 false 还是 true 按需要输入</span><br></pre></td></tr></table></figure><p><strong>每次更改cofig文件需要一段时间才能生效，不要着急</strong></p><p>至此，结束，还有什么问题可以到 <code>https://docs.github.com/cn</code>自行查看解决。</p><p><strong>问题5：</strong>出现以下显示，不影响，暂时没有找到解决办法</p><p><img src="C:\Users\MTRleed\Desktop\20210912141526.png" alt="20210912141526"></p><p><strong>问题6</strong>: git遇到fatal: unable to access <code>https://github.com/xxx/xxx/</code>:OpenSSL SSL_read: Connection was aborted, errno 10053的问题<br>原因:Git默认限制推送的大小，运行命令更改限制大小即可<br><strong>解决方法</strong></p><p>在执行 hexo d 之前先执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><h2 id="以下是-Hexo-主题的美化"><a href="#以下是-Hexo-主题的美化" class="headerlink" title="以下是 Hexo 主题的美化"></a>以下是 Hexo 主题的美化</h2><p><strong>待完成的任务：</strong></p><p>1.加载动画(已完成)</p><p><a href="https://akilar.top/posts/3d221bf2/">加载动画添加</a></p><p>2.完善顶部导航栏的标签，友链，关于我。添加搜索功能，留言功能</p><p>3.主页的背景更换渐变色（已完成）</p><p>4.子页面的图片 （已完成）</p><p>5.底部的网站运行总时长(<a href="https://butterfly.hclonely.com/posts/57bd67ce/#pixiv%E6%97%A5%E6%A6%9C">页脚运行时间</a>)，删掉广告(主题配置文件下的copyrigh，关掉就好)；改变字体颜色（在footer.styl文件中修改）{已完成}</p><p>6.右侧公告编辑（已完成）</p><p>7.首页的每日一句话（已完成）</p><p>butterfly_yml 文件</p><p><img src="C:\Users\MTRleed\Desktop\QQ截图20210917190211.png"></p><p>8.CDN 加速 GitHub 图床（已完成）</p><p><a href="https://blog.csdn.net/pilihaotian/article/details/103338003?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163185413616780269877161%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163185413616780269877161&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-103338003.pc_search_result_control_group&utm_term=%E4%BD%BF%E7%94%A8jsdelivr+++GitHub+++PicGo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A&spm=1018.2226.3001.4187">GitHub+PicGo+jsDelivr搭建高速稳定免费图床</a></p><ul><li><pre><code class="bash">Hexo配置文件：- 根目录：站点基本信息、写作格式、Github部署等。- 主题目录：站点导航、插件等信息。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**1.butterfly 首页图片：**</span><br><span class="line"></span><br><span class="line">使用 GitHub 图床</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/MTRleed/picGO/master/2021/bj.png)</span><br><span class="line"></span><br><span class="line">**问题1：**出现瞬间的蓝色背景。可能是图片过大，加载慢，用压缩图片都工具压一下。</span><br><span class="line"></span><br><span class="line">使用CDN加速</span><br><span class="line"></span><br></pre></td></tr></table></figure>https://cdn.jsdelivr.net/gh/MTRleed/picGO/master/2021/bj.png</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/aa.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/bj1.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/touxiang.jpeg"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/%E5%A4%87%E6%A1%88.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/253.jpg"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/333.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/bj.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/index.html"/>
      <url>/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在暑假抽空搭建了一个属于自己的博客，顺便把自己的搭建过程记录下来，与大家分享</strong></p><h2 id="VPS和域名"><a href="#VPS和域名" class="headerlink" title="VPS和域名"></a>VPS和域名</h2><p>1.购买服务器<br>2.购买域名<br>3.域名绑定IP解析</p><h2 id="安装Node与Git"><a href="#安装Node与Git" class="headerlink" title="安装Node与Git"></a>安装Node与Git</h2><p>1.安装Node 到官网下载，安装。<code>http://nodejs.cn/</code></p><p>2.安装Git 到官网下载，安装。<code>https://gitforwindows.org/</code></p><p>2.1。设置git 用户和邮箱，后面获取 SSH 密钥需要</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;MTRleed&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>3.安装npm 后使用 npm 安装cnmp 。由于npm国内下载速度经常抽风，所以建议安装淘宝的这个镜像；使用方法就是在命令中把npm换成cnpm即可。</p><p>npm 在安装Node 的时候就会一并安装</p><p>安装好node之后，node的环境变量会自动配置好，这里需要配置npm的环境变量。</p><p>3.1 打开node目录，在nodejs下建立”node_global”及”node_cache”两个文件夹，输入以下命令改变npm配置，记得改成自己的路径</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;F:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;F:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>3.2安装cnpm 的cmd 命令 <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>安装完 cnpm -v 显示 ‘cnpm’ 不是内部或外部命令，也不是可运行的程序 ,将存有 cnpm.cmd 的路径添加到环境变量中。再次执行就可以看到，对应版本信息。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hexo文件架构。</span><br><span class="line">├── node_modules：<span class="comment">#依赖包-安装插件及所需nodejs模块。</span></span><br><span class="line">├── public  <span class="comment">#最终网页信息。即存放被解析markdown、html文件。</span></span><br><span class="line">├── scaffolds <span class="comment">#模板文件夹。即当您新建文章时，根据 scaffold生成文件。</span></span><br><span class="line">├── <span class="built_in">source</span>  <span class="comment">#资源文件夹。即存放用户资源。</span></span><br><span class="line">|   └── _posts <span class="comment">#博客文章目录。</span></span><br><span class="line">└── themes <span class="comment">#存放主题。Hexo根据主题生成静态页面。</span></span><br><span class="line">├── _config.yml   <span class="comment">#网站的配置信息。标题、网站名称等。</span></span><br><span class="line">├── db.json：<span class="comment">#source解析所得到的缓存文件。</span></span><br><span class="line">├── package.json  <span class="comment"># 应用程序信息。即配置Hexo运行需要js包。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><blockquote><p>```</p><ol start="2"><li>Yaml配置文件</li></ol><p>Yaml是专门用来写配置文件。即：一种通用的数据串行化格式。</p><p>基本规则<br> 大小写敏感。<br> 使用缩进表示层级关系。<br> 缩进时不允许使用Tab键，只允许使用空格。<br> 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.全局安装Hexo（不建议）</span><br><span class="line">在桌面空白处单击右键，打开git bash，输入`cnpm install hexo-cli -g`；安装完成后输入`hexo -v`，出现版本信息则表示安装成功。</span><br><span class="line"></span><br><span class="line">2.在项目中安装Hexo（我使用的）</span><br><span class="line">在桌面打开git bash，输入`mkdir blog`（在桌面新建了一个名为blog的文件夹），然后输入`cd blog`（进入到这个文件夹里），再依次执行如下操作：</span><br><span class="line"></span><br><span class="line">```cmd</span><br><span class="line">cnpm install hexo --save    #在当前项目中安装hexo；</span><br><span class="line">hexo init                   #初始化hexo；</span><br><span class="line">cnpm install                #安装依赖包；</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>3.安装Hexo插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-server --save         #搭建本地服务器所需插件</span><br><span class="line">cnpm install hexo-deployer-git --save   #使用git方式进行部署博客所需插件，就是推向远端的工具</span><br></pre></td></tr></table></figure><h2 id="Hexo常用命令详解"><a href="#Hexo常用命令详解" class="headerlink" title="Hexo常用命令详解"></a>Hexo常用命令详解</h2><p>Hexo 框架可以帮助我们快速创建一个属于自己的博客网站，熟悉 Hexo 框架提供的命令有利于我们管理博客</p><p>1、hexo init</p><p><code>hexo init</code> 命令用于初始化本地文件夹为网站的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><ul><li><code>folder</code>  可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li></ul><p> 2、hexo new</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new` 命令用于新建文章，一般可以简写为 `hexo n</span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><code>layout</code>  可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code>  必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><p> 3、hexo generate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate` 命令用于生成静态文件，一般可以简写为 `hexo g</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul><p>详细信息请参考：<a href="https://hexo.io/docs/generating">https://hexo.io/docs/generating</a></p><p> 4、hexo server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server` 命令用于启动本地服务器，一般可以简写为 `hexo s</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><p><strong>说明</strong> ：运行服务器前需要安装 hexo-server 插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>详细信息请参考：<a href="https://hexo.io/docs/server.html">https://hexo.io/docs/server.html</a></p><p> 5、hexo deploy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy` 命令用于部署网站，一般可以简写为 `hexo d</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li></ul><p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: &lt;repository url&gt;</span><br><span class="line">branch:master</span><br><span class="line">message: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>详细信息请参考：<a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p><p> 6、hexo clean</p><p><code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p><strong>网站显示异常时可尝试此操作</strong></p><p> 7、Option</p><p>（1）hexo –safe</p><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p><strong>安装新插件时遇到问题可尝试此操作</strong></p><p>（2）hexo –debug</p><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>（3）hexo –silent</p><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在本地生成博客静态页面并预览</p><p>以下皆为hexo的指令：</p><ol><li>在本地生成静态页面<br> <code>hexo generate</code>，会生成一个存放静态文件的文件夹<strong>public</strong>，其简写形式为<code>hexo g</code>；</li><li>启动本地服务器<br> <code>hexo server</code>,其简写形式为<code>hexo s</code>；<br> 这条指令运行完成后可在本地启动服务器并预览博客，默认网址为<code>http://localhost:4000/</code>。<br> 如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面</li></ol><p><img src="C:\Users\MTRleed\Desktop\QQ截图20210909151214.png"></p><h2 id="设置-SSH-连接"><a href="#设置-SSH-连接" class="headerlink" title="设置 SSH 连接"></a>设置 SSH 连接</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题，本地gi t项目与远端GitHub 连接</p><p>1.查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git</p><p>2.<strong>生成 SSH keys</strong></p><p>输入你自己的邮箱地址</p><p>在终端或者你的项目下 <code>ssh-keygen -t rsa -C &quot;80583600@qq.com&quot;</code></p><p>3.在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，根据需要而定可以直接按回车不设置密码。</p><p>4.<strong>添加 SSH Key 到 GitHub</strong></p><p>打开<code>C:\Users\MTRleed\.ssh\id_rsa.pub1，此文件里面内容为刚才生成的密钥，记事本打开，准确的复制这个文件的内容，粘贴到</code><a href="https://link.jianshu.com/?t=https://github.com/settings/ssh">https://github.com/settings/ssh</a>`的new SSH key中，就是这，tittle 可任意，内容放在 key 处</p><p><img src="E:\桌面\QQ截图20210910084616.png"></p><p>5.连接测试，在项目下使用 git bash ，<code>ssh -T git@github.com</code> # 注意邮箱地址不用改</p><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p><strong>Hi MTRleed! You’ve successfully authenticated, but GitHub does not provide shell access.</strong></p></blockquote><p>说明 SSH 设置成功了</p><h2 id="部署远端"><a href="#部署远端" class="headerlink" title="部署远端"></a>部署远端</h2><p>1.找到_config.yml</p><p>在最后一行修改</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">deploy: </span></span><br><span class="line"><span class="function"><span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function"><span class="title">repository</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">MTRleed</span>/<span class="title">MTRleed.gitbub.io.git</span>//弄得<span class="title">GitHub</span>地址</span></span><br><span class="line"><span class="function"><span class="title">branch</span>: <span class="title">master</span></span></span><br><span class="line"><span class="function">注意，每个 ：后面都要有个空格</span></span><br></pre></td></tr></table></figure><p>2.hexo clean，然后 hexo g 最后 hexo d</p><p>问题：hexo g 后显示 ERROR Deployer not found: git</p><p>在博客目录下 安装deployer服务<code>cnpm install hexo-deployer-git --save</code></p><p>hexo d 之后要进行 git 与 GitHub的认证，当出现</p><p><img src="E:\桌面\QQ截图20210910113259.png"></p><p>即为成功！</p><p>现在可以使用 <code>https://用户名.github.io</code>访问了</p><h2 id="域名解析绑定"><a href="#域名解析绑定" class="headerlink" title="域名解析绑定"></a>域名解析绑定</h2><p>1.在GitHub 的main下添加一个 CNAME 文件（无后缀），里面的内容写你的域名，例如：<code>www.mtrleed.com</code></p><p>同时在source 目录添加一个新文件 CNAME 就好 CNAME 不带任何后缀，这就是全称，里面写的是你的域名然后就ok了。</p><p><img src="E:\桌面\QQ截图20210910130807.png"></p><p>Source 选择 master，域名写我们自己的域名</p><p>建议将 HTTPS 服务打开，在下面我们会申请 SSL 进行服务的部署</p><p>域名解析可以选择 腾讯云 或者 cloudflare 解析</p><p>2.1.若选择腾讯云，在腾讯云添加 CNAME 解析，像这样</p><p><img src="E:\桌面\QQ截图20210910131122.png"></p><p>解析过程所需时间不定，最慢可能要半天，不急。等解析好后，就可以使用 <code>www.mtrleed.com</code>访问<code>www.github.io</code>了</p><p>添加 HTTPS:// 服务：在腾讯云申请 SSL ，免费的几分钟就好。然后部署到我们所要的域名，等待解析时间即可。然后一行访问域名就会默认 HTTPS 协议传输</p><p>2.2.使用cloudflare 解析和使用腾讯云差不多。参考<code>https://blog.csdn.net/qq_37683287/article/details/91559605</code></p><h2 id="Hexo-主题更换"><a href="#Hexo-主题更换" class="headerlink" title="Hexo 主题更换"></a>Hexo 主题更换</h2><p>我使用的是 Butterfly -By John Doe 主题。</p><p>1.在themes 目录下使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/jerryc127/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><p>然后到 config文件中将 theme 参数改成我们主题的名字，注意主题名字要和你themes 下主题文件名一致，否则报错。</p><p><strong>问题：1</strong>.有时候我们在GitHub上clone一些项目的时候，会出现error: RPC failed; curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected flush after ref listing错误。<br>此时执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span>//针对所有远程服务器全局执行，使git忽略ssl证书错误（把忽略证书错误的设置限定在特定的仓库</span><br></pre></td></tr></table></figure><p>然后再clone即可</p><p>有时候执行 hexo d 会报 <code>OpenSSL SSL_connect: Connection was reset in connection to github.com:443</code>会样的错，(这是使用代理造成的)这时你需要撤掉梯子，重新使用SSL连接GitHub，然后再hexo d</p><p>**问题2.**：更换butterfly主题后报错：extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug<br>解决办法：<br>1.在博客目录下打开git bash here，输入命令：npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br>然后再：<br> hexo clean<br> hexo g<br> hexo s<br> 然后问题就解决啦</p><p><strong>问题3</strong> ：主题换好后只在本地生效，在使用域名访问时主题没有改变<br>不要在master分支上部署pages服务。master分支是保存代码的，你要用hexo编译，生成public文件夹后，将public文件夹推到另一个分支，然后在这个分支上部署pages服务。</p><p><strong>问题4：</strong><br>hexo d 后显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> 2021/09/08/hello-world/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/2021/09/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/2021/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> archives/index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> atom.xml.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> css/index.css.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> index.html.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/main.js.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/search/algolia.js.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/search/local-search.js.</span><br></pre></td></tr></table></figure><p>我们只需执行<code>git config --global core.autocrlf false</code>即可解决</p><p>**解释:**将core.autocrlf设为false即可解决这个问题，不过如果你和你的伙伴只工作于Windows平台或者Linux平台，那么没问题，不过如果是存在跨平台的现象的话，还是需要考虑一下。<br>但当 core autocrlf为true时，还有一个需要慎重的地方，当你上传一个二进制文件，Git可能会将二进制文件误以为是文本文件，从而也会修改你的二进制文件，从而产生隐患</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.autocrlf true #最后这里依据 false 还是 true 按需要输入</span><br></pre></td></tr></table></figure><p><strong>每次更改cofig文件需要一段时间才能生效，不要着急</strong></p><p>至此，结束，还有什么问题可以到 <code>https://docs.github.com/cn</code>自行查看解决。</p><p><strong>问题5：</strong>出现以下显示，不影响，暂时没有找到解决办法</p><p><img src="C:\Users\MTRleed\Desktop\20210912141526.png" alt="20210912141526"></p><p><strong>问题6</strong>: git遇到fatal: unable to access <code>https://github.com/xxx/xxx/</code>:OpenSSL SSL_read: Connection was aborted, errno 10053的问题<br>原因:Git默认限制推送的大小，运行命令更改限制大小即可<br><strong>解决方法</strong></p><p>在执行 hexo d 之前先执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><h2 id="以下是-Hexo-主题的美化"><a href="#以下是-Hexo-主题的美化" class="headerlink" title="以下是 Hexo 主题的美化"></a>以下是 Hexo 主题的美化</h2><p><strong>待完成的任务：</strong></p><p>1.加载动画(已完成)</p><p><a href="https://akilar.top/posts/3d221bf2/">加载动画添加</a></p><p>2.完善顶部导航栏的标签，友链，关于我。添加搜索功能，留言功能</p><p>3.主页的背景更换渐变色（已完成）</p><p>4.子页面的图片 （已完成）</p><p>5.底部的网站运行总时长(<a href="https://butterfly.hclonely.com/posts/57bd67ce/#pixiv%E6%97%A5%E6%A6%9C">页脚运行时间</a>)，删掉广告(主题配置文件下的copyrigh，关掉就好)；改变字体颜色（在footer.styl文件中修改）{已完成}</p><p>6.右侧公告编辑（已完成）</p><p>7.首页的每日一句话（已完成）</p><p>butterfly_yml 文件</p><p><img src="C:\Users\MTRleed\Desktop\QQ截图20210917190211.png"></p><p>8.CDN 加速 GitHub 图床（已完成）</p><p><a href="https://blog.csdn.net/pilihaotian/article/details/103338003?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163185413616780269877161%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163185413616780269877161&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-103338003.pc_search_result_control_group&utm_term=%E4%BD%BF%E7%94%A8jsdelivr+++GitHub+++PicGo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A&spm=1018.2226.3001.4187">GitHub+PicGo+jsDelivr搭建高速稳定免费图床</a></p><ul><li><pre><code class="bash">Hexo配置文件：- 根目录：站点基本信息、写作格式、Github部署等。- 主题目录：站点导航、插件等信息。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**1.butterfly 首页图片：**</span><br><span class="line"></span><br><span class="line">使用 GitHub 图床</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/MTRleed/picGO/master/2021/bj.png)</span><br><span class="line"></span><br><span class="line">**问题1：**出现瞬间的蓝色背景。可能是图片过大，加载慢，用压缩图片都工具压一下。</span><br><span class="line"></span><br><span class="line">使用CDN加速</span><br><span class="line"></span><br></pre></td></tr></table></figure>https://cdn.jsdelivr.net/gh/MTRleed/picGO/master/2021/bj.png</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/aa.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/bj1.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/touxiang.jpeg"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/%E5%A4%87%E6%A1%88.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/253.jpg"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/333.png"><br><img src="https://cdn.jsdelivr.net/gh/MTRleed/PicGo/2021/bj.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/yyy.html"/>
      <url>/post/yyy.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: </p><p><a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
